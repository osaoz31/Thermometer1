
Thermometer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003438  08003438  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  080034b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080034b0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a200  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ceb  00000000  00000000  0002a299  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002bf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015213  00000000  00000000  0002d130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008006  00000000  00000000  00042343  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d1a9  00000000  00000000  0004a349  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b74f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bbc  00000000  00000000  000b7570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003328 	.word	0x08003328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003328 	.word	0x08003328

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ff98 	bl	800209c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d101      	bne.n	8000432 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800042e:	2301      	movs	r3, #1
 8000430:	e043      	b.n	80004ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	461a      	mov	r2, r3
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_DMA_Init+0xa8>)
 800043a:	4413      	add	r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <HAL_DMA_Init+0xac>)
 800043e:	fba2 2303 	umull	r2, r3, r2, r3
 8000442:	091b      	lsrs	r3, r3, #4
 8000444:	009a      	lsls	r2, r3, #2
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a1f      	ldr	r2, [pc, #124]	; (80004cc <HAL_DMA_Init+0xb0>)
 800044e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2202      	movs	r2, #2
 8000454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000466:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800046a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	4313      	orrs	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2200      	movs	r2, #0
 80004a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2201      	movs	r2, #1
 80004ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	bffdfff8 	.word	0xbffdfff8
 80004c8:	cccccccd 	.word	0xcccccccd
 80004cc:	40020000 	.word	0x40020000

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b08b      	sub	sp, #44	; 0x2c
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004e2:	e127      	b.n	8000734 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004e4:	2201      	movs	r2, #1
 80004e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	4013      	ands	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004f8:	69ba      	ldr	r2, [r7, #24]
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	f040 8116 	bne.w	800072e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	2b12      	cmp	r3, #18
 8000508:	d034      	beq.n	8000574 <HAL_GPIO_Init+0xa4>
 800050a:	2b12      	cmp	r3, #18
 800050c:	d80d      	bhi.n	800052a <HAL_GPIO_Init+0x5a>
 800050e:	2b02      	cmp	r3, #2
 8000510:	d02b      	beq.n	800056a <HAL_GPIO_Init+0x9a>
 8000512:	2b02      	cmp	r3, #2
 8000514:	d804      	bhi.n	8000520 <HAL_GPIO_Init+0x50>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d031      	beq.n	800057e <HAL_GPIO_Init+0xae>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d01c      	beq.n	8000558 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800051e:	e048      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000520:	2b03      	cmp	r3, #3
 8000522:	d043      	beq.n	80005ac <HAL_GPIO_Init+0xdc>
 8000524:	2b11      	cmp	r3, #17
 8000526:	d01b      	beq.n	8000560 <HAL_GPIO_Init+0x90>
          break;
 8000528:	e043      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800052a:	4a89      	ldr	r2, [pc, #548]	; (8000750 <HAL_GPIO_Init+0x280>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d026      	beq.n	800057e <HAL_GPIO_Init+0xae>
 8000530:	4a87      	ldr	r2, [pc, #540]	; (8000750 <HAL_GPIO_Init+0x280>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d806      	bhi.n	8000544 <HAL_GPIO_Init+0x74>
 8000536:	4a87      	ldr	r2, [pc, #540]	; (8000754 <HAL_GPIO_Init+0x284>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d020      	beq.n	800057e <HAL_GPIO_Init+0xae>
 800053c:	4a86      	ldr	r2, [pc, #536]	; (8000758 <HAL_GPIO_Init+0x288>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d01d      	beq.n	800057e <HAL_GPIO_Init+0xae>
          break;
 8000542:	e036      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000544:	4a85      	ldr	r2, [pc, #532]	; (800075c <HAL_GPIO_Init+0x28c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d019      	beq.n	800057e <HAL_GPIO_Init+0xae>
 800054a:	4a85      	ldr	r2, [pc, #532]	; (8000760 <HAL_GPIO_Init+0x290>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d016      	beq.n	800057e <HAL_GPIO_Init+0xae>
 8000550:	4a84      	ldr	r2, [pc, #528]	; (8000764 <HAL_GPIO_Init+0x294>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d013      	beq.n	800057e <HAL_GPIO_Init+0xae>
          break;
 8000556:	e02c      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	623b      	str	r3, [r7, #32]
          break;
 800055e:	e028      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	3304      	adds	r3, #4
 8000566:	623b      	str	r3, [r7, #32]
          break;
 8000568:	e023      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	3308      	adds	r3, #8
 8000570:	623b      	str	r3, [r7, #32]
          break;
 8000572:	e01e      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	330c      	adds	r3, #12
 800057a:	623b      	str	r3, [r7, #32]
          break;
 800057c:	e019      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d102      	bne.n	800058c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000586:	2304      	movs	r3, #4
 8000588:	623b      	str	r3, [r7, #32]
          break;
 800058a:	e012      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d105      	bne.n	80005a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000594:	2308      	movs	r3, #8
 8000596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	611a      	str	r2, [r3, #16]
          break;
 800059e:	e008      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005a0:	2308      	movs	r3, #8
 80005a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	615a      	str	r2, [r3, #20]
          break;
 80005aa:	e002      	b.n	80005b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
          break;
 80005b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	2bff      	cmp	r3, #255	; 0xff
 80005b6:	d801      	bhi.n	80005bc <HAL_GPIO_Init+0xec>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	e001      	b.n	80005c0 <HAL_GPIO_Init+0xf0>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3304      	adds	r3, #4
 80005c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d802      	bhi.n	80005ce <HAL_GPIO_Init+0xfe>
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	e002      	b.n	80005d4 <HAL_GPIO_Init+0x104>
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	3b08      	subs	r3, #8
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	210f      	movs	r1, #15
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	401a      	ands	r2, r3
 80005e6:	6a39      	ldr	r1, [r7, #32]
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	431a      	orrs	r2, r3
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f000 8096 	beq.w	800072e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4b59      	ldr	r3, [pc, #356]	; (8000768 <HAL_GPIO_Init+0x298>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a58      	ldr	r2, [pc, #352]	; (8000768 <HAL_GPIO_Init+0x298>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <HAL_GPIO_Init+0x298>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800061a:	4a54      	ldr	r2, [pc, #336]	; (800076c <HAL_GPIO_Init+0x29c>)
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	3302      	adds	r3, #2
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	f003 0303 	and.w	r3, r3, #3
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	220f      	movs	r2, #15
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a4b      	ldr	r2, [pc, #300]	; (8000770 <HAL_GPIO_Init+0x2a0>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d013      	beq.n	800066e <HAL_GPIO_Init+0x19e>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a4a      	ldr	r2, [pc, #296]	; (8000774 <HAL_GPIO_Init+0x2a4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d00d      	beq.n	800066a <HAL_GPIO_Init+0x19a>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a49      	ldr	r2, [pc, #292]	; (8000778 <HAL_GPIO_Init+0x2a8>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d007      	beq.n	8000666 <HAL_GPIO_Init+0x196>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a48      	ldr	r2, [pc, #288]	; (800077c <HAL_GPIO_Init+0x2ac>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d101      	bne.n	8000662 <HAL_GPIO_Init+0x192>
 800065e:	2303      	movs	r3, #3
 8000660:	e006      	b.n	8000670 <HAL_GPIO_Init+0x1a0>
 8000662:	2304      	movs	r3, #4
 8000664:	e004      	b.n	8000670 <HAL_GPIO_Init+0x1a0>
 8000666:	2302      	movs	r3, #2
 8000668:	e002      	b.n	8000670 <HAL_GPIO_Init+0x1a0>
 800066a:	2301      	movs	r3, #1
 800066c:	e000      	b.n	8000670 <HAL_GPIO_Init+0x1a0>
 800066e:	2300      	movs	r3, #0
 8000670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000672:	f002 0203 	and.w	r2, r2, #3
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	4093      	lsls	r3, r2
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4313      	orrs	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000680:	493a      	ldr	r1, [pc, #232]	; (800076c <HAL_GPIO_Init+0x29c>)
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	3302      	adds	r3, #2
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4938      	ldr	r1, [pc, #224]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	600b      	str	r3, [r1, #0]
 80006a6:	e006      	b.n	80006b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4933      	ldr	r1, [pc, #204]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	492e      	ldr	r1, [pc, #184]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	604b      	str	r3, [r1, #4]
 80006ce:	e006      	b.n	80006de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	43db      	mvns	r3, r3
 80006d8:	4929      	ldr	r1, [pc, #164]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006da:	4013      	ands	r3, r2
 80006dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	4924      	ldr	r1, [pc, #144]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	608b      	str	r3, [r1, #8]
 80006f6:	e006      	b.n	8000706 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	43db      	mvns	r3, r3
 8000700:	491f      	ldr	r1, [pc, #124]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 8000702:	4013      	ands	r3, r2
 8000704:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d006      	beq.n	8000720 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	491a      	ldr	r1, [pc, #104]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	4313      	orrs	r3, r2
 800071c:	60cb      	str	r3, [r1, #12]
 800071e:	e006      	b.n	800072e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	43db      	mvns	r3, r3
 8000728:	4915      	ldr	r1, [pc, #84]	; (8000780 <HAL_GPIO_Init+0x2b0>)
 800072a:	4013      	ands	r3, r2
 800072c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	3301      	adds	r3, #1
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	fa22 f303 	lsr.w	r3, r2, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	f47f aed0 	bne.w	80004e4 <HAL_GPIO_Init+0x14>
  }
}
 8000744:	bf00      	nop
 8000746:	372c      	adds	r7, #44	; 0x2c
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	10210000 	.word	0x10210000
 8000754:	10110000 	.word	0x10110000
 8000758:	10120000 	.word	0x10120000
 800075c:	10310000 	.word	0x10310000
 8000760:	10320000 	.word	0x10320000
 8000764:	10220000 	.word	0x10220000
 8000768:	40021000 	.word	0x40021000
 800076c:	40010000 	.word	0x40010000
 8000770:	40010800 	.word	0x40010800
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40011000 	.word	0x40011000
 800077c:	40011400 	.word	0x40011400
 8000780:	40010400 	.word	0x40010400

08000784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
 8000790:	4613      	mov	r3, r2
 8000792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000794:	787b      	ldrb	r3, [r7, #1]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800079a:	887a      	ldrh	r2, [r7, #2]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80007a0:	e003      	b.n	80007aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	041a      	lsls	r2, r3, #16
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	611a      	str	r2, [r3, #16]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68da      	ldr	r2, [r3, #12]
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007cc:	887a      	ldrh	r2, [r7, #2]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80007d2:	e002      	b.n	80007da <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007d4:	887a      	ldrh	r2, [r7, #2]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	611a      	str	r2, [r3, #16]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e26c      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f000 8087 	beq.w	8000912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000804:	4b92      	ldr	r3, [pc, #584]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 030c 	and.w	r3, r3, #12
 800080c:	2b04      	cmp	r3, #4
 800080e:	d00c      	beq.n	800082a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000810:	4b8f      	ldr	r3, [pc, #572]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 030c 	and.w	r3, r3, #12
 8000818:	2b08      	cmp	r3, #8
 800081a:	d112      	bne.n	8000842 <HAL_RCC_OscConfig+0x5e>
 800081c:	4b8c      	ldr	r3, [pc, #560]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000828:	d10b      	bne.n	8000842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082a:	4b89      	ldr	r3, [pc, #548]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d06c      	beq.n	8000910 <HAL_RCC_OscConfig+0x12c>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d168      	bne.n	8000910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e246      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800084a:	d106      	bne.n	800085a <HAL_RCC_OscConfig+0x76>
 800084c:	4b80      	ldr	r3, [pc, #512]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	e02e      	b.n	80008b8 <HAL_RCC_OscConfig+0xd4>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10c      	bne.n	800087c <HAL_RCC_OscConfig+0x98>
 8000862:	4b7b      	ldr	r3, [pc, #492]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a7a      	ldr	r2, [pc, #488]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	4b78      	ldr	r3, [pc, #480]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a77      	ldr	r2, [pc, #476]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e01d      	b.n	80008b8 <HAL_RCC_OscConfig+0xd4>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000884:	d10c      	bne.n	80008a0 <HAL_RCC_OscConfig+0xbc>
 8000886:	4b72      	ldr	r3, [pc, #456]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a71      	ldr	r2, [pc, #452]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800088c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	4b6f      	ldr	r3, [pc, #444]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a6e      	ldr	r2, [pc, #440]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e00b      	b.n	80008b8 <HAL_RCC_OscConfig+0xd4>
 80008a0:	4b6b      	ldr	r3, [pc, #428]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80008a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b68      	ldr	r3, [pc, #416]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a67      	ldr	r2, [pc, #412]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80008b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d013      	beq.n	80008e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c0:	f7ff fc9c 	bl	80001fc <HAL_GetTick>
 80008c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c6:	e008      	b.n	80008da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008c8:	f7ff fc98 	bl	80001fc <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	2b64      	cmp	r3, #100	; 0x64
 80008d4:	d901      	bls.n	80008da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008d6:	2303      	movs	r3, #3
 80008d8:	e1fa      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	4b5d      	ldr	r3, [pc, #372]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f0      	beq.n	80008c8 <HAL_RCC_OscConfig+0xe4>
 80008e6:	e014      	b.n	8000912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e8:	f7ff fc88 	bl	80001fc <HAL_GetTick>
 80008ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ee:	e008      	b.n	8000902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008f0:	f7ff fc84 	bl	80001fc <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b64      	cmp	r3, #100	; 0x64
 80008fc:	d901      	bls.n	8000902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e1e6      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000902:	4b53      	ldr	r3, [pc, #332]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f0      	bne.n	80008f0 <HAL_RCC_OscConfig+0x10c>
 800090e:	e000      	b.n	8000912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d063      	beq.n	80009e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800091e:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 030c 	and.w	r3, r3, #12
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00b      	beq.n	8000942 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b08      	cmp	r3, #8
 8000934:	d11c      	bne.n	8000970 <HAL_RCC_OscConfig+0x18c>
 8000936:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d116      	bne.n	8000970 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000942:	4b43      	ldr	r3, [pc, #268]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d005      	beq.n	800095a <HAL_RCC_OscConfig+0x176>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d001      	beq.n	800095a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e1ba      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	4939      	ldr	r1, [pc, #228]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800096a:	4313      	orrs	r3, r2
 800096c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096e:	e03a      	b.n	80009e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d020      	beq.n	80009ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <HAL_RCC_OscConfig+0x270>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800097e:	f7ff fc3d 	bl	80001fc <HAL_GetTick>
 8000982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000984:	e008      	b.n	8000998 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000986:	f7ff fc39 	bl	80001fc <HAL_GetTick>
 800098a:	4602      	mov	r2, r0
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	2b02      	cmp	r3, #2
 8000992:	d901      	bls.n	8000998 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000994:	2303      	movs	r3, #3
 8000996:	e19b      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0f0      	beq.n	8000986 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a4:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	4927      	ldr	r1, [pc, #156]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80009b4:	4313      	orrs	r3, r2
 80009b6:	600b      	str	r3, [r1, #0]
 80009b8:	e015      	b.n	80009e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <HAL_RCC_OscConfig+0x270>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c0:	f7ff fc1c 	bl	80001fc <HAL_GetTick>
 80009c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c6:	e008      	b.n	80009da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009c8:	f7ff fc18 	bl	80001fc <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d901      	bls.n	80009da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009d6:	2303      	movs	r3, #3
 80009d8:	e17a      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f0      	bne.n	80009c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d03a      	beq.n	8000a68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d019      	beq.n	8000a2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_RCC_OscConfig+0x274>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a00:	f7ff fbfc 	bl	80001fc <HAL_GetTick>
 8000a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a08:	f7ff fbf8 	bl	80001fc <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e15a      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_RCC_OscConfig+0x26c>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f0      	beq.n	8000a08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fada 	bl	8000fe0 <RCC_Delay>
 8000a2c:	e01c      	b.n	8000a68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_RCC_OscConfig+0x274>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a34:	f7ff fbe2 	bl	80001fc <HAL_GetTick>
 8000a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a3a:	e00f      	b.n	8000a5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fbde 	bl	80001fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d908      	bls.n	8000a5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e140      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	42420000 	.word	0x42420000
 8000a58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	4b9e      	ldr	r3, [pc, #632]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e9      	bne.n	8000a3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 80a6 	beq.w	8000bc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a7a:	4b97      	ldr	r3, [pc, #604]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10d      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b94      	ldr	r3, [pc, #592]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a93      	ldr	r2, [pc, #588]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b91      	ldr	r3, [pc, #580]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa2:	4b8e      	ldr	r3, [pc, #568]	; (8000cdc <HAL_RCC_OscConfig+0x4f8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d118      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aae:	4b8b      	ldr	r3, [pc, #556]	; (8000cdc <HAL_RCC_OscConfig+0x4f8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a8a      	ldr	r2, [pc, #552]	; (8000cdc <HAL_RCC_OscConfig+0x4f8>)
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aba:	f7ff fb9f 	bl	80001fc <HAL_GetTick>
 8000abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac0:	e008      	b.n	8000ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ac2:	f7ff fb9b 	bl	80001fc <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	2b64      	cmp	r3, #100	; 0x64
 8000ace:	d901      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e0fd      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad4:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <HAL_RCC_OscConfig+0x4f8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f0      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d106      	bne.n	8000af6 <HAL_RCC_OscConfig+0x312>
 8000ae8:	4b7b      	ldr	r3, [pc, #492]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	4a7a      	ldr	r2, [pc, #488]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6213      	str	r3, [r2, #32]
 8000af4:	e02d      	b.n	8000b52 <HAL_RCC_OscConfig+0x36e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x334>
 8000afe:	4b76      	ldr	r3, [pc, #472]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	4a75      	ldr	r2, [pc, #468]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b04:	f023 0301 	bic.w	r3, r3, #1
 8000b08:	6213      	str	r3, [r2, #32]
 8000b0a:	4b73      	ldr	r3, [pc, #460]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a72      	ldr	r2, [pc, #456]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b10:	f023 0304 	bic.w	r3, r3, #4
 8000b14:	6213      	str	r3, [r2, #32]
 8000b16:	e01c      	b.n	8000b52 <HAL_RCC_OscConfig+0x36e>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	d10c      	bne.n	8000b3a <HAL_RCC_OscConfig+0x356>
 8000b20:	4b6d      	ldr	r3, [pc, #436]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4a6c      	ldr	r2, [pc, #432]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6213      	str	r3, [r2, #32]
 8000b2c:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	4a69      	ldr	r2, [pc, #420]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6213      	str	r3, [r2, #32]
 8000b38:	e00b      	b.n	8000b52 <HAL_RCC_OscConfig+0x36e>
 8000b3a:	4b67      	ldr	r3, [pc, #412]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a66      	ldr	r2, [pc, #408]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b40:	f023 0301 	bic.w	r3, r3, #1
 8000b44:	6213      	str	r3, [r2, #32]
 8000b46:	4b64      	ldr	r3, [pc, #400]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	4a63      	ldr	r2, [pc, #396]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d015      	beq.n	8000b86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fb4f 	bl	80001fc <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b60:	e00a      	b.n	8000b78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b62:	f7ff fb4b 	bl	80001fc <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d901      	bls.n	8000b78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b74:	2303      	movs	r3, #3
 8000b76:	e0ab      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b78:	4b57      	ldr	r3, [pc, #348]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0ee      	beq.n	8000b62 <HAL_RCC_OscConfig+0x37e>
 8000b84:	e014      	b.n	8000bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b86:	f7ff fb39 	bl	80001fc <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b8c:	e00a      	b.n	8000ba4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e095      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1ee      	bne.n	8000b8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d105      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bb6:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a47      	ldr	r2, [pc, #284]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8081 	beq.w	8000cce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 030c 	and.w	r3, r3, #12
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d061      	beq.n	8000c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d146      	bne.n	8000c6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000be0:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <HAL_RCC_OscConfig+0x4fc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be6:	f7ff fb09 	bl	80001fc <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bee:	f7ff fb05 	bl	80001fc <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e067      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f0      	bne.n	8000bee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c14:	d108      	bne.n	8000c28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	492d      	ldr	r1, [pc, #180]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a19      	ldr	r1, [r3, #32]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	4927      	ldr	r1, [pc, #156]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <HAL_RCC_OscConfig+0x4fc>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c46:	f7ff fad9 	bl	80001fc <HAL_GetTick>
 8000c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4e:	f7ff fad5 	bl	80001fc <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e037      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x46a>
 8000c6c:	e02f      	b.n	8000cce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_RCC_OscConfig+0x4fc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff fac2 	bl	80001fc <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c7c:	f7ff fabe 	bl	80001fc <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e020      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f0      	bne.n	8000c7c <HAL_RCC_OscConfig+0x498>
 8000c9a:	e018      	b.n	8000cce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e013      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_RCC_OscConfig+0x4f4>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d106      	bne.n	8000cca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40007000 	.word	0x40007000
 8000ce0:	42420060 	.word	0x42420060

08000ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e0d0      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cf8:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d910      	bls.n	8000d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 0207 	bic.w	r2, r3, #7
 8000d0e:	4965      	ldr	r1, [pc, #404]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d16:	4b63      	ldr	r3, [pc, #396]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d001      	beq.n	8000d28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e0b8      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d020      	beq.n	8000d76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d40:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a58      	ldr	r2, [pc, #352]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4a52      	ldr	r2, [pc, #328]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d64:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	494d      	ldr	r1, [pc, #308]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d040      	beq.n	8000e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d107      	bne.n	8000d9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d115      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e07f      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d107      	bne.n	8000db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da2:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e073      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e06b      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f023 0203 	bic.w	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	4936      	ldr	r1, [pc, #216]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dd4:	f7ff fa12 	bl	80001fc <HAL_GetTick>
 8000dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dda:	e00a      	b.n	8000df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ddc:	f7ff fa0e 	bl	80001fc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e053      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 020c 	and.w	r2, r3, #12
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d1eb      	bne.n	8000ddc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d210      	bcs.n	8000e34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 0207 	bic.w	r2, r3, #7
 8000e1a:	4922      	ldr	r1, [pc, #136]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d001      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e032      	b.n	8000e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d008      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4916      	ldr	r1, [pc, #88]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d009      	beq.n	8000e72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e72:	f000 f821 	bl	8000eb8 <HAL_RCC_GetSysClockFreq>
 8000e76:	4601      	mov	r1, r0
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_RCC_ClockConfig+0x1c8>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8000e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f970 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40022000 	.word	0x40022000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	08003388 	.word	0x08003388
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000eb8:	b490      	push	{r4, r7}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ec0:	1d3c      	adds	r4, r7, #4
 8000ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d002      	beq.n	8000ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d003      	beq.n	8000efe <HAL_RCC_GetSysClockFreq+0x46>
 8000ef6:	e02d      	b.n	8000f54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000efa:	623b      	str	r3, [r7, #32]
      break;
 8000efc:	e02d      	b.n	8000f5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	0c9b      	lsrs	r3, r3, #18
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d013      	beq.n	8000f44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	0c5b      	lsrs	r3, r3, #17
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f36:	fb02 f203 	mul.w	r2, r2, r3
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	e004      	b.n	8000f4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	623b      	str	r3, [r7, #32]
      break;
 8000f52:	e002      	b.n	8000f5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f56:	623b      	str	r3, [r7, #32]
      break;
 8000f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc90      	pop	{r4, r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	08003340 	.word	0x08003340
 8000f6c:	08003350 	.word	0x08003350
 8000f70:	40021000 	.word	0x40021000
 8000f74:	007a1200 	.word	0x007a1200
 8000f78:	003d0900 	.word	0x003d0900

08000f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f94:	f7ff fff2 	bl	8000f7c <HAL_RCC_GetHCLKFreq>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	08003398 	.word	0x08003398

08000fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_RCC_GetHCLKFreq>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	0adb      	lsrs	r3, r3, #11
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	08003398 	.word	0x08003398

08000fe0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <RCC_Delay+0x34>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <RCC_Delay+0x38>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0a5b      	lsrs	r3, r3, #9
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ffc:	bf00      	nop
  }
  while (Delay --);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	60fa      	str	r2, [r7, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f9      	bne.n	8000ffc <RCC_Delay+0x1c>
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	10624dd3 	.word	0x10624dd3

0800101c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e053      	b.n	80010d6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f001 f855 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2202      	movs	r2, #2
 8001052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001064:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	ea42 0103 	orr.w	r1, r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	0c1a      	lsrs	r2, r3, #16
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f002 0204 	and.w	r2, r2, #4
 80010b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010fa:	d112      	bne.n	8001122 <HAL_SPI_Receive+0x44>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10e      	bne.n	8001122 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2204      	movs	r2, #4
 8001108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4613      	mov	r3, r2
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f8e9 	bl	80012f0 <HAL_SPI_TransmitReceive>
 800111e:	4603      	mov	r3, r0
 8001120:	e0e2      	b.n	80012e8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_SPI_Receive+0x52>
 800112c:	2302      	movs	r3, #2
 800112e:	e0db      	b.n	80012e8 <HAL_SPI_Receive+0x20a>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001138:	f7ff f860 	bl	80001fc <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800114a:	2302      	movs	r3, #2
 800114c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800114e:	e0c2      	b.n	80012d6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_SPI_Receive+0x7e>
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001160:	e0b9      	b.n	80012d6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2204      	movs	r2, #4
 8001166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011a8:	d107      	bne.n	80011ba <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c4:	2b40      	cmp	r3, #64	; 0x40
 80011c6:	d007      	beq.n	80011d8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d162      	bne.n	80012a6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80011e0:	e02e      	b.n	8001240 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d115      	bne.n	800121c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f103 020c 	add.w	r2, r3, #12
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001210:	b29b      	uxth	r3, r3
 8001212:	3b01      	subs	r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800121a:	e011      	b.n	8001240 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800121c:	f7fe ffee 	bl	80001fc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d803      	bhi.n	8001234 <HAL_SPI_Receive+0x156>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001232:	d102      	bne.n	800123a <HAL_SPI_Receive+0x15c>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800123e:	e04a      	b.n	80012d6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001244:	b29b      	uxth	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1cb      	bne.n	80011e2 <HAL_SPI_Receive+0x104>
 800124a:	e031      	b.n	80012b0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d113      	bne.n	8001282 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001264:	b292      	uxth	r2, r2
 8001266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126c:	1c9a      	adds	r2, r3, #2
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001276:	b29b      	uxth	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001280:	e011      	b.n	80012a6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001282:	f7fe ffbb 	bl	80001fc <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d803      	bhi.n	800129a <HAL_SPI_Receive+0x1bc>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001298:	d102      	bne.n	80012a0 <HAL_SPI_Receive+0x1c2>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80012a4:	e017      	b.n	80012d6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1cd      	bne.n	800124c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 fa27 	bl	8001708 <SPI_EndRxTransaction>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2220      	movs	r2, #32
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	e000      	b.n	80012d6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80012d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_SPI_TransmitReceive+0x26>
 8001312:	2302      	movs	r3, #2
 8001314:	e18a      	b.n	800162c <HAL_SPI_TransmitReceive+0x33c>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800131e:	f7fe ff6d 	bl	80001fc <HAL_GetTick>
 8001322:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800132a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800133c:	2b01      	cmp	r3, #1
 800133e:	d00f      	beq.n	8001360 <HAL_SPI_TransmitReceive+0x70>
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001346:	d107      	bne.n	8001358 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <HAL_SPI_TransmitReceive+0x68>
 8001350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001354:	2b04      	cmp	r3, #4
 8001356:	d003      	beq.n	8001360 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001358:	2302      	movs	r3, #2
 800135a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800135e:	e15b      	b.n	8001618 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_SPI_TransmitReceive+0x82>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <HAL_SPI_TransmitReceive+0x82>
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001378:	e14e      	b.n	8001618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b04      	cmp	r3, #4
 8001384:	d003      	beq.n	800138e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2205      	movs	r2, #5
 800138a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	2b40      	cmp	r3, #64	; 0x40
 80013d0:	d007      	beq.n	80013e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013ea:	d178      	bne.n	80014de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <HAL_SPI_TransmitReceive+0x10a>
 80013f4:	8b7b      	ldrh	r3, [r7, #26]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d166      	bne.n	80014c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	1c9a      	adds	r2, r3, #2
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001414:	b29b      	uxth	r3, r3
 8001416:	3b01      	subs	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800141e:	e053      	b.n	80014c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d11b      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x176>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001432:	b29b      	uxth	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d016      	beq.n	8001466 <HAL_SPI_TransmitReceive+0x176>
 8001438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143a:	2b01      	cmp	r3, #1
 800143c:	d113      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	881a      	ldrh	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	1c9a      	adds	r2, r3, #2
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b01      	cmp	r3, #1
 8001472:	d119      	bne.n	80014a8 <HAL_SPI_TransmitReceive+0x1b8>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d014      	beq.n	80014a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	b292      	uxth	r2, r2
 800148a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001490:	1c9a      	adds	r2, r3, #2
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800149a:	b29b      	uxth	r3, r3
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80014a8:	f7fe fea8 	bl	80001fc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d807      	bhi.n	80014c8 <HAL_SPI_TransmitReceive+0x1d8>
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014be:	d003      	beq.n	80014c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80014c6:	e0a7      	b.n	8001618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1a6      	bne.n	8001420 <HAL_SPI_TransmitReceive+0x130>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1a1      	bne.n	8001420 <HAL_SPI_TransmitReceive+0x130>
 80014dc:	e07c      	b.n	80015d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_SPI_TransmitReceive+0x1fc>
 80014e6:	8b7b      	ldrh	r3, [r7, #26]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d16b      	bne.n	80015c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	330c      	adds	r3, #12
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001508:	b29b      	uxth	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001512:	e057      	b.n	80015c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b02      	cmp	r3, #2
 8001520:	d11c      	bne.n	800155c <HAL_SPI_TransmitReceive+0x26c>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001526:	b29b      	uxth	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d017      	beq.n	800155c <HAL_SPI_TransmitReceive+0x26c>
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	2b01      	cmp	r3, #1
 8001530:	d114      	bne.n	800155c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	330c      	adds	r3, #12
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d119      	bne.n	800159e <HAL_SPI_TransmitReceive+0x2ae>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800156e:	b29b      	uxth	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d014      	beq.n	800159e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b01      	subs	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800159a:	2301      	movs	r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800159e:	f7fe fe2d 	bl	80001fc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d803      	bhi.n	80015b6 <HAL_SPI_TransmitReceive+0x2c6>
 80015ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d102      	bne.n	80015bc <HAL_SPI_TransmitReceive+0x2cc>
 80015b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80015c2:	e029      	b.n	8001618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1a2      	bne.n	8001514 <HAL_SPI_TransmitReceive+0x224>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d19d      	bne.n	8001514 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f8e5 	bl	80017ac <SPI_EndRxTxTransaction>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2220      	movs	r2, #32
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80015f4:	e010      	b.n	8001618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10b      	bne.n	8001616 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	e000      	b.n	8001618 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800162c:	4618      	mov	r0, r3
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001644:	e04c      	b.n	80016e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800164c:	d048      	beq.n	80016e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800164e:	f7fe fdd5 	bl	80001fc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d902      	bls.n	8001664 <SPI_WaitFlagStateUntilTimeout+0x30>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d13d      	bne.n	80016e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001672:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800167c:	d111      	bne.n	80016a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001686:	d004      	beq.n	8001692 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d107      	bne.n	80016a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016aa:	d10f      	bne.n	80016cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e00f      	b.n	8001700 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4013      	ands	r3, r2
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d1a3      	bne.n	8001646 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800171c:	d111      	bne.n	8001742 <SPI_EndRxTransaction+0x3a>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001726:	d004      	beq.n	8001732 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001730:	d107      	bne.n	8001742 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001740:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800174a:	d117      	bne.n	800177c <SPI_EndRxTransaction+0x74>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001754:	d112      	bne.n	800177c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2200      	movs	r2, #0
 800175e:	2101      	movs	r1, #1
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff ff67 	bl	8001634 <SPI_WaitFlagStateUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01a      	beq.n	80017a2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e013      	b.n	80017a4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff ff54 	bl	8001634 <SPI_WaitFlagStateUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f043 0220 	orr.w	r2, r3, #32
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e000      	b.n	80017a4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff ff36 	bl	8001634 <SPI_WaitFlagStateUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f043 0220 	orr.w	r2, r3, #32
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e000      	b.n	80017e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e03f      	b.n	800187a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fcbc 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	; 0x24
 8001818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800182a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f90b 	bl	8001a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2220      	movs	r2, #32
 800186c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b088      	sub	sp, #32
 8001886:	af02      	add	r7, sp, #8
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b20      	cmp	r3, #32
 80018a0:	f040 8083 	bne.w	80019aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_UART_Transmit+0x2e>
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e07b      	b.n	80019ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_UART_Transmit+0x40>
 80018be:	2302      	movs	r3, #2
 80018c0:	e074      	b.n	80019ac <HAL_UART_Transmit+0x12a>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2221      	movs	r2, #33	; 0x21
 80018d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80018d8:	f7fe fc90 	bl	80001fc <HAL_GetTick>
 80018dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	88fa      	ldrh	r2, [r7, #6]
 80018e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018ea:	e042      	b.n	8001972 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001902:	d122      	bne.n	800194a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f850 	bl	80019b4 <UART_WaitOnFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e046      	b.n	80019ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001930:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3302      	adds	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	e017      	b.n	8001972 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3301      	adds	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	e013      	b.n	8001972 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2200      	movs	r2, #0
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f82d 	bl	80019b4 <UART_WaitOnFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e023      	b.n	80019ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1b7      	bne.n	80018ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2200      	movs	r2, #0
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f814 	bl	80019b4 <UART_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e00a      	b.n	80019ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
  }
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019c4:	e02c      	b.n	8001a20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019cc:	d028      	beq.n	8001a20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80019d4:	f7fe fc12 	bl	80001fc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d21d      	bcs.n	8001a20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e00f      	b.n	8001a40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d0c3      	beq.n	80019c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a82:	f023 030c 	bic.w	r3, r3, #12
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <UART_SetConfig+0x1ac>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d14e      	bne.n	8001b4e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ab0:	f7ff fa82 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001ab4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009a      	lsls	r2, r3, #2
 8001ac0:	441a      	add	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	0119      	lsls	r1, r3, #4
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009a      	lsls	r2, r3, #2
 8001ae0:	441a      	add	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001aee:	fba3 0302 	umull	r0, r3, r3, r2
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	fb00 f303 	mul.w	r3, r0, r3
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	3332      	adds	r3, #50	; 0x32
 8001b00:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b0c:	4419      	add	r1, r3
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	009a      	lsls	r2, r3, #2
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001b26:	fba3 0302 	umull	r0, r3, r3, r2
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2064      	movs	r0, #100	; 0x64
 8001b2e:	fb00 f303 	mul.w	r3, r0, r3
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	3332      	adds	r3, #50	; 0x32
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	440a      	add	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001b4c:	e04d      	b.n	8001bea <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b4e:	f7ff fa1f 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001b52:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009a      	lsls	r2, r3, #2
 8001b5e:	441a      	add	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	0119      	lsls	r1, r3, #4
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	441a      	add	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001b8c:	fba3 0302 	umull	r0, r3, r3, r2
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	2064      	movs	r0, #100	; 0x64
 8001b94:	fb00 f303 	mul.w	r3, r0, r3
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	3332      	adds	r3, #50	; 0x32
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001baa:	4419      	add	r1, r3
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	441a      	add	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	2064      	movs	r0, #100	; 0x64
 8001bcc:	fb00 f303 	mul.w	r3, r0, r3
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	3332      	adds	r3, #50	; 0x32
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <UART_SetConfig+0x1b0>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	440a      	add	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	51eb851f 	.word	0x51eb851f

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f7fe faa4 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f82c 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f000 f90a 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c0c:	f000 f8ce 	bl	8001dac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001c10:	f000 f8a2 	bl	8001d58 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001c14:	f000 f86a 	bl	8001cec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_max6675(&hspi1);
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <main+0x50>)
 8001c1a:	f000 f973 	bl	8001f04 <init_max6675>
  init_stdio_redirect_to_usart(&huart1);
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <main+0x54>)
 8001c20:	f000 fa2e 	bl	8002080 <init_stdio_redirect_to_usart>
  printf("\r\n Thermometer is run! Lets go! \r\n");
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <main+0x58>)
 8001c26:	f000 fca1 	bl	800256c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("T = %u mC; \r\n", get_temperature_max6675());
 8001c2a:	f000 f9db 	bl	8001fe4 <get_temperature_max6675>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <main+0x5c>)
 8001c34:	f000 fc26 	bl	8002484 <iprintf>

	  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8001c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <main+0x60>)
 8001c3e:	f7fe fdb9 	bl	80007b4 <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 8001c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c46:	f7fe fae3 	bl	8000210 <HAL_Delay>
	  printf("T = %u mC; \r\n", get_temperature_max6675());
 8001c4a:	e7ee      	b.n	8001c2a <main+0x2e>
 8001c4c:	20000120 	.word	0x20000120
 8001c50:	2000009c 	.word	0x2000009c
 8001c54:	08003354 	.word	0x08003354
 8001c58:	08003378 	.word	0x08003378
 8001c5c:	40011000 	.word	0x40011000

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b090      	sub	sp, #64	; 0x40
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	2228      	movs	r2, #40	; 0x28
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fc00 	bl	8002474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c94:	2302      	movs	r3, #2
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca4:	f107 0318 	add.w	r3, r7, #24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fd9b 	bl	80007e4 <HAL_RCC_OscConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cb4:	f000 f920 	bl	8001ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb8:	230f      	movs	r3, #15
 8001cba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f806 	bl	8000ce4 <HAL_RCC_ClockConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cde:	f000 f90b 	bl	8001ef8 <Error_Handler>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3740      	adds	r7, #64	; 0x40
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <MX_SPI1_Init+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d20:	2208      	movs	r2, #8
 8001d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d38:	220a      	movs	r2, #10
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d3e:	f7ff f96d 	bl	800101c <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d48:	f000 f8d6 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000120 	.word	0x20000120
 8001d54:	40013000 	.word	0x40013000

08001d58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <MX_USART1_UART_Init+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d90:	f7ff fd2a 	bl	80017e8 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d9a:	f000 f8ad 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000009c 	.word	0x2000009c
 8001da8:	40013800 	.word	0x40013800

08001dac <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_DMA_Init+0x68>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <MX_DMA_Init+0x68>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6153      	str	r3, [r2, #20]
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <MX_DMA_Init+0x68>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <MX_DMA_Init+0x70>)
 8001dce:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dd6:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_DMA_Init+0x6c>)
 8001dfe:	f7fe fb0d 	bl	800041c <HAL_DMA_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8001e08:	f000 f876 	bl	8001ef8 <Error_Handler>
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	200000dc 	.word	0x200000dc
 8001e1c:	40020008 	.word	0x40020008

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a26      	ldr	r2, [pc, #152]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a20      	ldr	r2, [pc, #128]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_GPIO_Init+0xcc>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <MX_GPIO_Init+0xd0>)
 8001e9c:	f7fe fc72 	bl	8000784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001ea6:	f7fe fc6d 	bl	8000784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <MX_GPIO_Init+0xd0>)
 8001ec4:	f7fe fb04 	bl	80004d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001ee0:	f7fe faf6 	bl	80004d0 <HAL_GPIO_Init>

}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	40010800 	.word	0x40010800

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <init_max6675>:
#include "max6675.h"

SPI_HandleTypeDef * hspi;

void init_max6675(SPI_HandleTypeDef * hspix)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	hspi = hspix;
 8001f0c:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <init_max6675+0x18>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000178 	.word	0x20000178

08001f20 <read_max6675>:

uint16_t    read_max6675(void)
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	466b      	mov	r3, sp
 8001f28:	461d      	mov	r5, r3
	uint8_t q = 0, q_byte = 2;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	737b      	strb	r3, [r7, #13]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	733b      	strb	r3, [r7, #12]
	uint8_t buffer[q_byte];
 8001f32:	7b38      	ldrb	r0, [r7, #12]
 8001f34:	4603      	mov	r3, r0
 8001f36:	3b01      	subs	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	b2c1      	uxtb	r1, r0
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f04f 0400 	mov.w	r4, #0
 8001f48:	00d4      	lsls	r4, r2, #3
 8001f4a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f4e:	00cb      	lsls	r3, r1, #3
 8001f50:	b2c1      	uxtb	r1, r0
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f04f 0400 	mov.w	r4, #0
 8001f5e:	00d4      	lsls	r4, r2, #3
 8001f60:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f64:	00cb      	lsls	r3, r1, #3
 8001f66:	4603      	mov	r3, r0
 8001f68:	3307      	adds	r3, #7
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001f72:	466b      	mov	r3, sp
 8001f74:	3300      	adds	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
	uint16_t value = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	81fb      	strh	r3, [r7, #14]

	//if (DebugMax)
	//printf("Read max6675 \r\n");

	SET_PIN_CS(0);//HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2108      	movs	r1, #8
 8001f80:	4816      	ldr	r0, [pc, #88]	; (8001fdc <read_max6675+0xbc>)
 8001f82:	f7fe fbff 	bl	8000784 <HAL_GPIO_WritePin>
	TC_DELAY(1);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7fe f942 	bl	8000210 <HAL_Delay>

	HAL_SPI_Receive(hspi, &buffer[0], 2, 1000);
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <read_max6675+0xc0>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	2202      	movs	r2, #2
 8001f98:	f7ff f8a1 	bl	80010de <HAL_SPI_Receive>
		//printf(" b1 = %u;", buffer[1]);
		q++;
	}	q = 0;
	*/

	while (q < q_byte)
 8001f9c:	e00c      	b.n	8001fb8 <read_max6675+0x98>
	{
		value <<= 8;
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	81fb      	strh	r3, [r7, #14]
		value |= buffer[q];
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	81fb      	strh	r3, [r7, #14]
		//printf(" buffer[x] = %#x;\r\n", buffer[q]);
		q++;
 8001fb2:	7b7b      	ldrb	r3, [r7, #13]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	737b      	strb	r3, [r7, #13]
	while (q < q_byte)
 8001fb8:	7b7a      	ldrb	r2, [r7, #13]
 8001fba:	7b3b      	ldrb	r3, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3ee      	bcc.n	8001f9e <read_max6675+0x7e>
	}	q = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	737b      	strb	r3, [r7, #13]
	//printf(" value = %#lx;", value);

	SET_PIN_CS(1);//HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, 1);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <read_max6675+0xbc>)
 8001fca:	f7fe fbdb 	bl	8000784 <HAL_GPIO_WritePin>

	return value;
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	46ad      	mov	sp, r5
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	20000178 	.word	0x20000178

08001fe4 <get_temperature_max6675>:

uint16_t    get_temperature_max6675(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
	uint16_t  v = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	80fb      	strh	r3, [r7, #6]

	//if (DebugMax) printf("\r\nRead Temperature Celcius");

	v = read_max6675();
 8001fee:	f7ff ff97 	bl	8001f20 <read_max6675>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]

	if (v & 0x4)
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <get_temperature_max6675+0x22>
	{
		v = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	80fb      	strh	r3, [r7, #6]
 8002004:	e005      	b.n	8002012 <get_temperature_max6675+0x2e>
		if (DebugMax) printf("\r\n Error max6675! \r\n");
	}
	else
	{
		v = (v*250) >> 3; //v *= 250;v >>= 3;
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	22fa      	movs	r2, #250	; 0xfa
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	10db      	asrs	r3, r3, #3
 8002010:	80fb      	strh	r3, [r7, #6]
	}

	return v;
 8002012:	88fb      	ldrh	r3, [r7, #6]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <__io_putchar>:
#include "stdio_redirect_to_usart.h"

UART_HandleTypeDef * huart;

int __io_putchar(int ch)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	733b      	strb	r3, [r7, #12]

	HAL_UART_Transmit(huart, &*c, 1, 10);
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <__io_putchar+0x28>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f107 010c 	add.w	r1, r7, #12
 8002032:	230a      	movs	r3, #10
 8002034:	2201      	movs	r2, #1
 8002036:	f7ff fc24 	bl	8001882 <HAL_UART_Transmit>
	return ch;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2000017c 	.word	0x2000017c

08002048 <_write>:

int _write(int file, char * ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	int Dataldx;
	for (Dataldx = 0; Dataldx < len; Dataldx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e009      	b.n	800206e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	60ba      	str	r2, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ffda 	bl	800201c <__io_putchar>
	for (Dataldx = 0; Dataldx < len; Dataldx++)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	dbf1      	blt.n	800205a <_write+0x12>
	}

	return len;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <init_stdio_redirect_to_usart>:

void init_stdio_redirect_to_usart(UART_HandleTypeDef * huartx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	huart = huartx;
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <init_stdio_redirect_to_usart+0x18>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	2000017c 	.word	0x2000017c

0800209c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_MspInit+0x54>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_MspInit+0x54>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6193      	str	r3, [r2, #24]
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_MspInit+0x54>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_MspInit+0x54>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_MspInit+0x54>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_MspInit+0x54>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_MspInit+0x58>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_MspInit+0x58>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000

080020f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_SPI_MspInit+0x88>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12f      	bne.n	8002178 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 800211e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002148:	23a0      	movs	r3, #160	; 0xa0
 800214a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4619      	mov	r1, r3
 800215a:	480b      	ldr	r0, [pc, #44]	; (8002188 <HAL_SPI_MspInit+0x90>)
 800215c:	f7fe f9b8 	bl	80004d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002160:	2340      	movs	r3, #64	; 0x40
 8002162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4619      	mov	r1, r3
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_SPI_MspInit+0x90>)
 8002174:	f7fe f9ac 	bl	80004d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40013000 	.word	0x40013000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800

0800218c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_UART_MspInit+0x8c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d131      	bne.n	8002210 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_UART_MspInit+0x90>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_UART_MspInit+0x90>)
 80021b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_UART_MspInit+0x90>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_UART_MspInit+0x90>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <HAL_UART_MspInit+0x90>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_UART_MspInit+0x90>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021f2:	f7fe f96d 	bl	80004d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4619      	mov	r1, r3
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <HAL_UART_MspInit+0x94>)
 800220c:	f7fe f960 	bl	80004d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40013800 	.word	0x40013800
 800221c:	40021000 	.word	0x40021000
 8002220:	40010800 	.word	0x40010800

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <HardFault_Handler+0x4>

08002236 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <MemManage_Handler+0x4>

0800223c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <BusFault_Handler+0x4>

08002242 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <UsageFault_Handler+0x4>

08002248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f7fd ffb2 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e00a      	b.n	80022a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228a:	f3af 8000 	nop.w
 800228e:	4601      	mov	r1, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	b2ca      	uxtb	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf0      	blt.n	800228a <_read+0x12>
	}

return len;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d8:	605a      	str	r2, [r3, #4]
	return 0;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <_isatty>:

int _isatty(int file)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
	return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
	...

08002314 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_sbrk+0x50>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x16>
		heap_end = &end;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <_sbrk+0x50>)
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <_sbrk+0x54>)
 8002328:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <_sbrk+0x50>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <_sbrk+0x50>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	466a      	mov	r2, sp
 800233a:	4293      	cmp	r3, r2
 800233c:	d907      	bls.n	800234e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800233e:	f000 f86f 	bl	8002420 <__errno>
 8002342:	4602      	mov	r2, r0
 8002344:	230c      	movs	r3, #12
 8002346:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800234c:	e006      	b.n	800235c <_sbrk+0x48>
	}

	heap_end += incr;
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <_sbrk+0x50>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a03      	ldr	r2, [pc, #12]	; (8002364 <_sbrk+0x50>)
 8002358:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2000008c 	.word	0x2000008c
 8002368:	20000188 	.word	0x20000188

0800236c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <SystemInit+0x5c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <SystemInit+0x5c>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <SystemInit+0x5c>)
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4911      	ldr	r1, [pc, #68]	; (80023c8 <SystemInit+0x5c>)
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <SystemInit+0x60>)
 8002384:	4013      	ands	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <SystemInit+0x5c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <SystemInit+0x5c>)
 800238e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <SystemInit+0x5c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SystemInit+0x5c>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <SystemInit+0x5c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <SystemInit+0x5c>)
 80023aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SystemInit+0x5c>)
 80023b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SystemInit+0x64>)
 80023ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023be:	609a      	str	r2, [r3, #8]
#endif 
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000
 80023cc:	f8ff0000 	.word	0xf8ff0000
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023d6:	e003      	b.n	80023e0 <LoopCopyDataInit>

080023d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023de:	3104      	adds	r1, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023e0:	480a      	ldr	r0, [pc, #40]	; (800240c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023e8:	d3f6      	bcc.n	80023d8 <CopyDataInit>
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023ec:	e002      	b.n	80023f4 <LoopFillZerobss>

080023ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023f0:	f842 3b04 	str.w	r3, [r2], #4

080023f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023f8:	d3f9      	bcc.n	80023ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023fa:	f7ff ffb7 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f000 f815 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002402:	f7ff fbfb 	bl	8001bfc <main>
  bx lr
 8002406:	4770      	bx	lr
  ldr r3, =_sidata
 8002408:	08003440 	.word	0x08003440
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002410:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002414:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002418:	20000184 	.word	0x20000184

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>
	...

08002420 <__errno>:
 8002420:	4b01      	ldr	r3, [pc, #4]	; (8002428 <__errno+0x8>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	2000000c 	.word	0x2000000c

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	2500      	movs	r5, #0
 8002430:	4e0c      	ldr	r6, [pc, #48]	; (8002464 <__libc_init_array+0x38>)
 8002432:	4c0d      	ldr	r4, [pc, #52]	; (8002468 <__libc_init_array+0x3c>)
 8002434:	1ba4      	subs	r4, r4, r6
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	42a5      	cmp	r5, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	f000 ff74 	bl	8003328 <_init>
 8002440:	2500      	movs	r5, #0
 8002442:	4e0a      	ldr	r6, [pc, #40]	; (800246c <__libc_init_array+0x40>)
 8002444:	4c0a      	ldr	r4, [pc, #40]	; (8002470 <__libc_init_array+0x44>)
 8002446:	1ba4      	subs	r4, r4, r6
 8002448:	10a4      	asrs	r4, r4, #2
 800244a:	42a5      	cmp	r5, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002454:	4798      	blx	r3
 8002456:	3501      	adds	r5, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800245e:	4798      	blx	r3
 8002460:	3501      	adds	r5, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	08003438 	.word	0x08003438
 8002468:	08003438 	.word	0x08003438
 800246c:	08003438 	.word	0x08003438
 8002470:	0800343c 	.word	0x0800343c

08002474 <memset>:
 8002474:	4603      	mov	r3, r0
 8002476:	4402      	add	r2, r0
 8002478:	4293      	cmp	r3, r2
 800247a:	d100      	bne.n	800247e <memset+0xa>
 800247c:	4770      	bx	lr
 800247e:	f803 1b01 	strb.w	r1, [r3], #1
 8002482:	e7f9      	b.n	8002478 <memset+0x4>

08002484 <iprintf>:
 8002484:	b40f      	push	{r0, r1, r2, r3}
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <iprintf+0x2c>)
 8002488:	b513      	push	{r0, r1, r4, lr}
 800248a:	681c      	ldr	r4, [r3, #0]
 800248c:	b124      	cbz	r4, 8002498 <iprintf+0x14>
 800248e:	69a3      	ldr	r3, [r4, #24]
 8002490:	b913      	cbnz	r3, 8002498 <iprintf+0x14>
 8002492:	4620      	mov	r0, r4
 8002494:	f000 fa22 	bl	80028dc <__sinit>
 8002498:	ab05      	add	r3, sp, #20
 800249a:	9a04      	ldr	r2, [sp, #16]
 800249c:	68a1      	ldr	r1, [r4, #8]
 800249e:	4620      	mov	r0, r4
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	f000 fbd7 	bl	8002c54 <_vfiprintf_r>
 80024a6:	b002      	add	sp, #8
 80024a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ac:	b004      	add	sp, #16
 80024ae:	4770      	bx	lr
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <_puts_r>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	460e      	mov	r6, r1
 80024b8:	4605      	mov	r5, r0
 80024ba:	b118      	cbz	r0, 80024c4 <_puts_r+0x10>
 80024bc:	6983      	ldr	r3, [r0, #24]
 80024be:	b90b      	cbnz	r3, 80024c4 <_puts_r+0x10>
 80024c0:	f000 fa0c 	bl	80028dc <__sinit>
 80024c4:	69ab      	ldr	r3, [r5, #24]
 80024c6:	68ac      	ldr	r4, [r5, #8]
 80024c8:	b913      	cbnz	r3, 80024d0 <_puts_r+0x1c>
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 fa06 	bl	80028dc <__sinit>
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <_puts_r+0xac>)
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d117      	bne.n	8002506 <_puts_r+0x52>
 80024d6:	686c      	ldr	r4, [r5, #4]
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	071b      	lsls	r3, r3, #28
 80024dc:	d51d      	bpl.n	800251a <_puts_r+0x66>
 80024de:	6923      	ldr	r3, [r4, #16]
 80024e0:	b1db      	cbz	r3, 800251a <_puts_r+0x66>
 80024e2:	3e01      	subs	r6, #1
 80024e4:	68a3      	ldr	r3, [r4, #8]
 80024e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024ea:	3b01      	subs	r3, #1
 80024ec:	60a3      	str	r3, [r4, #8]
 80024ee:	b9e9      	cbnz	r1, 800252c <_puts_r+0x78>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da2e      	bge.n	8002552 <_puts_r+0x9e>
 80024f4:	4622      	mov	r2, r4
 80024f6:	210a      	movs	r1, #10
 80024f8:	4628      	mov	r0, r5
 80024fa:	f000 f83f 	bl	800257c <__swbuf_r>
 80024fe:	3001      	adds	r0, #1
 8002500:	d011      	beq.n	8002526 <_puts_r+0x72>
 8002502:	200a      	movs	r0, #10
 8002504:	e011      	b.n	800252a <_puts_r+0x76>
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <_puts_r+0xb0>)
 8002508:	429c      	cmp	r4, r3
 800250a:	d101      	bne.n	8002510 <_puts_r+0x5c>
 800250c:	68ac      	ldr	r4, [r5, #8]
 800250e:	e7e3      	b.n	80024d8 <_puts_r+0x24>
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <_puts_r+0xb4>)
 8002512:	429c      	cmp	r4, r3
 8002514:	bf08      	it	eq
 8002516:	68ec      	ldreq	r4, [r5, #12]
 8002518:	e7de      	b.n	80024d8 <_puts_r+0x24>
 800251a:	4621      	mov	r1, r4
 800251c:	4628      	mov	r0, r5
 800251e:	f000 f87f 	bl	8002620 <__swsetup_r>
 8002522:	2800      	cmp	r0, #0
 8002524:	d0dd      	beq.n	80024e2 <_puts_r+0x2e>
 8002526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	2b00      	cmp	r3, #0
 800252e:	da04      	bge.n	800253a <_puts_r+0x86>
 8002530:	69a2      	ldr	r2, [r4, #24]
 8002532:	429a      	cmp	r2, r3
 8002534:	dc06      	bgt.n	8002544 <_puts_r+0x90>
 8002536:	290a      	cmp	r1, #10
 8002538:	d004      	beq.n	8002544 <_puts_r+0x90>
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	6022      	str	r2, [r4, #0]
 8002540:	7019      	strb	r1, [r3, #0]
 8002542:	e7cf      	b.n	80024e4 <_puts_r+0x30>
 8002544:	4622      	mov	r2, r4
 8002546:	4628      	mov	r0, r5
 8002548:	f000 f818 	bl	800257c <__swbuf_r>
 800254c:	3001      	adds	r0, #1
 800254e:	d1c9      	bne.n	80024e4 <_puts_r+0x30>
 8002550:	e7e9      	b.n	8002526 <_puts_r+0x72>
 8002552:	200a      	movs	r0, #10
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	6022      	str	r2, [r4, #0]
 800255a:	7018      	strb	r0, [r3, #0]
 800255c:	e7e5      	b.n	800252a <_puts_r+0x76>
 800255e:	bf00      	nop
 8002560:	080033c4 	.word	0x080033c4
 8002564:	080033e4 	.word	0x080033e4
 8002568:	080033a4 	.word	0x080033a4

0800256c <puts>:
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <puts+0xc>)
 800256e:	4601      	mov	r1, r0
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	f7ff bf9f 	b.w	80024b4 <_puts_r>
 8002576:	bf00      	nop
 8002578:	2000000c 	.word	0x2000000c

0800257c <__swbuf_r>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	460e      	mov	r6, r1
 8002580:	4614      	mov	r4, r2
 8002582:	4605      	mov	r5, r0
 8002584:	b118      	cbz	r0, 800258e <__swbuf_r+0x12>
 8002586:	6983      	ldr	r3, [r0, #24]
 8002588:	b90b      	cbnz	r3, 800258e <__swbuf_r+0x12>
 800258a:	f000 f9a7 	bl	80028dc <__sinit>
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <__swbuf_r+0x98>)
 8002590:	429c      	cmp	r4, r3
 8002592:	d12a      	bne.n	80025ea <__swbuf_r+0x6e>
 8002594:	686c      	ldr	r4, [r5, #4]
 8002596:	69a3      	ldr	r3, [r4, #24]
 8002598:	60a3      	str	r3, [r4, #8]
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	071a      	lsls	r2, r3, #28
 800259e:	d52e      	bpl.n	80025fe <__swbuf_r+0x82>
 80025a0:	6923      	ldr	r3, [r4, #16]
 80025a2:	b363      	cbz	r3, 80025fe <__swbuf_r+0x82>
 80025a4:	6923      	ldr	r3, [r4, #16]
 80025a6:	6820      	ldr	r0, [r4, #0]
 80025a8:	b2f6      	uxtb	r6, r6
 80025aa:	1ac0      	subs	r0, r0, r3
 80025ac:	6963      	ldr	r3, [r4, #20]
 80025ae:	4637      	mov	r7, r6
 80025b0:	4283      	cmp	r3, r0
 80025b2:	dc04      	bgt.n	80025be <__swbuf_r+0x42>
 80025b4:	4621      	mov	r1, r4
 80025b6:	4628      	mov	r0, r5
 80025b8:	f000 f926 	bl	8002808 <_fflush_r>
 80025bc:	bb28      	cbnz	r0, 800260a <__swbuf_r+0x8e>
 80025be:	68a3      	ldr	r3, [r4, #8]
 80025c0:	3001      	adds	r0, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	60a3      	str	r3, [r4, #8]
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	6022      	str	r2, [r4, #0]
 80025cc:	701e      	strb	r6, [r3, #0]
 80025ce:	6963      	ldr	r3, [r4, #20]
 80025d0:	4283      	cmp	r3, r0
 80025d2:	d004      	beq.n	80025de <__swbuf_r+0x62>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	07db      	lsls	r3, r3, #31
 80025d8:	d519      	bpl.n	800260e <__swbuf_r+0x92>
 80025da:	2e0a      	cmp	r6, #10
 80025dc:	d117      	bne.n	800260e <__swbuf_r+0x92>
 80025de:	4621      	mov	r1, r4
 80025e0:	4628      	mov	r0, r5
 80025e2:	f000 f911 	bl	8002808 <_fflush_r>
 80025e6:	b190      	cbz	r0, 800260e <__swbuf_r+0x92>
 80025e8:	e00f      	b.n	800260a <__swbuf_r+0x8e>
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <__swbuf_r+0x9c>)
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d101      	bne.n	80025f4 <__swbuf_r+0x78>
 80025f0:	68ac      	ldr	r4, [r5, #8]
 80025f2:	e7d0      	b.n	8002596 <__swbuf_r+0x1a>
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <__swbuf_r+0xa0>)
 80025f6:	429c      	cmp	r4, r3
 80025f8:	bf08      	it	eq
 80025fa:	68ec      	ldreq	r4, [r5, #12]
 80025fc:	e7cb      	b.n	8002596 <__swbuf_r+0x1a>
 80025fe:	4621      	mov	r1, r4
 8002600:	4628      	mov	r0, r5
 8002602:	f000 f80d 	bl	8002620 <__swsetup_r>
 8002606:	2800      	cmp	r0, #0
 8002608:	d0cc      	beq.n	80025a4 <__swbuf_r+0x28>
 800260a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800260e:	4638      	mov	r0, r7
 8002610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002612:	bf00      	nop
 8002614:	080033c4 	.word	0x080033c4
 8002618:	080033e4 	.word	0x080033e4
 800261c:	080033a4 	.word	0x080033a4

08002620 <__swsetup_r>:
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <__swsetup_r+0xcc>)
 8002622:	b570      	push	{r4, r5, r6, lr}
 8002624:	681d      	ldr	r5, [r3, #0]
 8002626:	4606      	mov	r6, r0
 8002628:	460c      	mov	r4, r1
 800262a:	b125      	cbz	r5, 8002636 <__swsetup_r+0x16>
 800262c:	69ab      	ldr	r3, [r5, #24]
 800262e:	b913      	cbnz	r3, 8002636 <__swsetup_r+0x16>
 8002630:	4628      	mov	r0, r5
 8002632:	f000 f953 	bl	80028dc <__sinit>
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <__swsetup_r+0xd0>)
 8002638:	429c      	cmp	r4, r3
 800263a:	d10f      	bne.n	800265c <__swsetup_r+0x3c>
 800263c:	686c      	ldr	r4, [r5, #4]
 800263e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002642:	b29a      	uxth	r2, r3
 8002644:	0715      	lsls	r5, r2, #28
 8002646:	d42c      	bmi.n	80026a2 <__swsetup_r+0x82>
 8002648:	06d0      	lsls	r0, r2, #27
 800264a:	d411      	bmi.n	8002670 <__swsetup_r+0x50>
 800264c:	2209      	movs	r2, #9
 800264e:	6032      	str	r2, [r6, #0]
 8002650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002654:	81a3      	strh	r3, [r4, #12]
 8002656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800265a:	e03e      	b.n	80026da <__swsetup_r+0xba>
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <__swsetup_r+0xd4>)
 800265e:	429c      	cmp	r4, r3
 8002660:	d101      	bne.n	8002666 <__swsetup_r+0x46>
 8002662:	68ac      	ldr	r4, [r5, #8]
 8002664:	e7eb      	b.n	800263e <__swsetup_r+0x1e>
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <__swsetup_r+0xd8>)
 8002668:	429c      	cmp	r4, r3
 800266a:	bf08      	it	eq
 800266c:	68ec      	ldreq	r4, [r5, #12]
 800266e:	e7e6      	b.n	800263e <__swsetup_r+0x1e>
 8002670:	0751      	lsls	r1, r2, #29
 8002672:	d512      	bpl.n	800269a <__swsetup_r+0x7a>
 8002674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002676:	b141      	cbz	r1, 800268a <__swsetup_r+0x6a>
 8002678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800267c:	4299      	cmp	r1, r3
 800267e:	d002      	beq.n	8002686 <__swsetup_r+0x66>
 8002680:	4630      	mov	r0, r6
 8002682:	f000 fa19 	bl	8002ab8 <_free_r>
 8002686:	2300      	movs	r3, #0
 8002688:	6363      	str	r3, [r4, #52]	; 0x34
 800268a:	89a3      	ldrh	r3, [r4, #12]
 800268c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002690:	81a3      	strh	r3, [r4, #12]
 8002692:	2300      	movs	r3, #0
 8002694:	6063      	str	r3, [r4, #4]
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	89a3      	ldrh	r3, [r4, #12]
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	81a3      	strh	r3, [r4, #12]
 80026a2:	6923      	ldr	r3, [r4, #16]
 80026a4:	b94b      	cbnz	r3, 80026ba <__swsetup_r+0x9a>
 80026a6:	89a3      	ldrh	r3, [r4, #12]
 80026a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b0:	d003      	beq.n	80026ba <__swsetup_r+0x9a>
 80026b2:	4621      	mov	r1, r4
 80026b4:	4630      	mov	r0, r6
 80026b6:	f000 f9bf 	bl	8002a38 <__smakebuf_r>
 80026ba:	89a2      	ldrh	r2, [r4, #12]
 80026bc:	f012 0301 	ands.w	r3, r2, #1
 80026c0:	d00c      	beq.n	80026dc <__swsetup_r+0xbc>
 80026c2:	2300      	movs	r3, #0
 80026c4:	60a3      	str	r3, [r4, #8]
 80026c6:	6963      	ldr	r3, [r4, #20]
 80026c8:	425b      	negs	r3, r3
 80026ca:	61a3      	str	r3, [r4, #24]
 80026cc:	6923      	ldr	r3, [r4, #16]
 80026ce:	b953      	cbnz	r3, 80026e6 <__swsetup_r+0xc6>
 80026d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80026d8:	d1ba      	bne.n	8002650 <__swsetup_r+0x30>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	0792      	lsls	r2, r2, #30
 80026de:	bf58      	it	pl
 80026e0:	6963      	ldrpl	r3, [r4, #20]
 80026e2:	60a3      	str	r3, [r4, #8]
 80026e4:	e7f2      	b.n	80026cc <__swsetup_r+0xac>
 80026e6:	2000      	movs	r0, #0
 80026e8:	e7f7      	b.n	80026da <__swsetup_r+0xba>
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	080033c4 	.word	0x080033c4
 80026f4:	080033e4 	.word	0x080033e4
 80026f8:	080033a4 	.word	0x080033a4

080026fc <__sflush_r>:
 80026fc:	898a      	ldrh	r2, [r1, #12]
 80026fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002702:	4605      	mov	r5, r0
 8002704:	0710      	lsls	r0, r2, #28
 8002706:	460c      	mov	r4, r1
 8002708:	d458      	bmi.n	80027bc <__sflush_r+0xc0>
 800270a:	684b      	ldr	r3, [r1, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dc05      	bgt.n	800271c <__sflush_r+0x20>
 8002710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	dc02      	bgt.n	800271c <__sflush_r+0x20>
 8002716:	2000      	movs	r0, #0
 8002718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800271e:	2e00      	cmp	r6, #0
 8002720:	d0f9      	beq.n	8002716 <__sflush_r+0x1a>
 8002722:	2300      	movs	r3, #0
 8002724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002728:	682f      	ldr	r7, [r5, #0]
 800272a:	6a21      	ldr	r1, [r4, #32]
 800272c:	602b      	str	r3, [r5, #0]
 800272e:	d032      	beq.n	8002796 <__sflush_r+0x9a>
 8002730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002732:	89a3      	ldrh	r3, [r4, #12]
 8002734:	075a      	lsls	r2, r3, #29
 8002736:	d505      	bpl.n	8002744 <__sflush_r+0x48>
 8002738:	6863      	ldr	r3, [r4, #4]
 800273a:	1ac0      	subs	r0, r0, r3
 800273c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800273e:	b10b      	cbz	r3, 8002744 <__sflush_r+0x48>
 8002740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002742:	1ac0      	subs	r0, r0, r3
 8002744:	2300      	movs	r3, #0
 8002746:	4602      	mov	r2, r0
 8002748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800274a:	6a21      	ldr	r1, [r4, #32]
 800274c:	4628      	mov	r0, r5
 800274e:	47b0      	blx	r6
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	d106      	bne.n	8002764 <__sflush_r+0x68>
 8002756:	6829      	ldr	r1, [r5, #0]
 8002758:	291d      	cmp	r1, #29
 800275a:	d848      	bhi.n	80027ee <__sflush_r+0xf2>
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <__sflush_r+0x108>)
 800275e:	40ca      	lsrs	r2, r1
 8002760:	07d6      	lsls	r6, r2, #31
 8002762:	d544      	bpl.n	80027ee <__sflush_r+0xf2>
 8002764:	2200      	movs	r2, #0
 8002766:	6062      	str	r2, [r4, #4]
 8002768:	6922      	ldr	r2, [r4, #16]
 800276a:	04d9      	lsls	r1, r3, #19
 800276c:	6022      	str	r2, [r4, #0]
 800276e:	d504      	bpl.n	800277a <__sflush_r+0x7e>
 8002770:	1c42      	adds	r2, r0, #1
 8002772:	d101      	bne.n	8002778 <__sflush_r+0x7c>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	b903      	cbnz	r3, 800277a <__sflush_r+0x7e>
 8002778:	6560      	str	r0, [r4, #84]	; 0x54
 800277a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800277c:	602f      	str	r7, [r5, #0]
 800277e:	2900      	cmp	r1, #0
 8002780:	d0c9      	beq.n	8002716 <__sflush_r+0x1a>
 8002782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002786:	4299      	cmp	r1, r3
 8002788:	d002      	beq.n	8002790 <__sflush_r+0x94>
 800278a:	4628      	mov	r0, r5
 800278c:	f000 f994 	bl	8002ab8 <_free_r>
 8002790:	2000      	movs	r0, #0
 8002792:	6360      	str	r0, [r4, #52]	; 0x34
 8002794:	e7c0      	b.n	8002718 <__sflush_r+0x1c>
 8002796:	2301      	movs	r3, #1
 8002798:	4628      	mov	r0, r5
 800279a:	47b0      	blx	r6
 800279c:	1c41      	adds	r1, r0, #1
 800279e:	d1c8      	bne.n	8002732 <__sflush_r+0x36>
 80027a0:	682b      	ldr	r3, [r5, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0c5      	beq.n	8002732 <__sflush_r+0x36>
 80027a6:	2b1d      	cmp	r3, #29
 80027a8:	d001      	beq.n	80027ae <__sflush_r+0xb2>
 80027aa:	2b16      	cmp	r3, #22
 80027ac:	d101      	bne.n	80027b2 <__sflush_r+0xb6>
 80027ae:	602f      	str	r7, [r5, #0]
 80027b0:	e7b1      	b.n	8002716 <__sflush_r+0x1a>
 80027b2:	89a3      	ldrh	r3, [r4, #12]
 80027b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b8:	81a3      	strh	r3, [r4, #12]
 80027ba:	e7ad      	b.n	8002718 <__sflush_r+0x1c>
 80027bc:	690f      	ldr	r7, [r1, #16]
 80027be:	2f00      	cmp	r7, #0
 80027c0:	d0a9      	beq.n	8002716 <__sflush_r+0x1a>
 80027c2:	0793      	lsls	r3, r2, #30
 80027c4:	bf18      	it	ne
 80027c6:	2300      	movne	r3, #0
 80027c8:	680e      	ldr	r6, [r1, #0]
 80027ca:	bf08      	it	eq
 80027cc:	694b      	ldreq	r3, [r1, #20]
 80027ce:	eba6 0807 	sub.w	r8, r6, r7
 80027d2:	600f      	str	r7, [r1, #0]
 80027d4:	608b      	str	r3, [r1, #8]
 80027d6:	f1b8 0f00 	cmp.w	r8, #0
 80027da:	dd9c      	ble.n	8002716 <__sflush_r+0x1a>
 80027dc:	4643      	mov	r3, r8
 80027de:	463a      	mov	r2, r7
 80027e0:	6a21      	ldr	r1, [r4, #32]
 80027e2:	4628      	mov	r0, r5
 80027e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027e6:	47b0      	blx	r6
 80027e8:	2800      	cmp	r0, #0
 80027ea:	dc06      	bgt.n	80027fa <__sflush_r+0xfe>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f8:	e78e      	b.n	8002718 <__sflush_r+0x1c>
 80027fa:	4407      	add	r7, r0
 80027fc:	eba8 0800 	sub.w	r8, r8, r0
 8002800:	e7e9      	b.n	80027d6 <__sflush_r+0xda>
 8002802:	bf00      	nop
 8002804:	20400001 	.word	0x20400001

08002808 <_fflush_r>:
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	690b      	ldr	r3, [r1, #16]
 800280c:	4605      	mov	r5, r0
 800280e:	460c      	mov	r4, r1
 8002810:	b1db      	cbz	r3, 800284a <_fflush_r+0x42>
 8002812:	b118      	cbz	r0, 800281c <_fflush_r+0x14>
 8002814:	6983      	ldr	r3, [r0, #24]
 8002816:	b90b      	cbnz	r3, 800281c <_fflush_r+0x14>
 8002818:	f000 f860 	bl	80028dc <__sinit>
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <_fflush_r+0x48>)
 800281e:	429c      	cmp	r4, r3
 8002820:	d109      	bne.n	8002836 <_fflush_r+0x2e>
 8002822:	686c      	ldr	r4, [r5, #4]
 8002824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002828:	b17b      	cbz	r3, 800284a <_fflush_r+0x42>
 800282a:	4621      	mov	r1, r4
 800282c:	4628      	mov	r0, r5
 800282e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002832:	f7ff bf63 	b.w	80026fc <__sflush_r>
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <_fflush_r+0x4c>)
 8002838:	429c      	cmp	r4, r3
 800283a:	d101      	bne.n	8002840 <_fflush_r+0x38>
 800283c:	68ac      	ldr	r4, [r5, #8]
 800283e:	e7f1      	b.n	8002824 <_fflush_r+0x1c>
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <_fflush_r+0x50>)
 8002842:	429c      	cmp	r4, r3
 8002844:	bf08      	it	eq
 8002846:	68ec      	ldreq	r4, [r5, #12]
 8002848:	e7ec      	b.n	8002824 <_fflush_r+0x1c>
 800284a:	2000      	movs	r0, #0
 800284c:	bd38      	pop	{r3, r4, r5, pc}
 800284e:	bf00      	nop
 8002850:	080033c4 	.word	0x080033c4
 8002854:	080033e4 	.word	0x080033e4
 8002858:	080033a4 	.word	0x080033a4

0800285c <std>:
 800285c:	2300      	movs	r3, #0
 800285e:	b510      	push	{r4, lr}
 8002860:	4604      	mov	r4, r0
 8002862:	e9c0 3300 	strd	r3, r3, [r0]
 8002866:	6083      	str	r3, [r0, #8]
 8002868:	8181      	strh	r1, [r0, #12]
 800286a:	6643      	str	r3, [r0, #100]	; 0x64
 800286c:	81c2      	strh	r2, [r0, #14]
 800286e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002872:	6183      	str	r3, [r0, #24]
 8002874:	4619      	mov	r1, r3
 8002876:	2208      	movs	r2, #8
 8002878:	305c      	adds	r0, #92	; 0x5c
 800287a:	f7ff fdfb 	bl	8002474 <memset>
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <std+0x38>)
 8002880:	6224      	str	r4, [r4, #32]
 8002882:	6263      	str	r3, [r4, #36]	; 0x24
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <std+0x3c>)
 8002886:	62a3      	str	r3, [r4, #40]	; 0x28
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <std+0x40>)
 800288a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <std+0x44>)
 800288e:	6323      	str	r3, [r4, #48]	; 0x30
 8002890:	bd10      	pop	{r4, pc}
 8002892:	bf00      	nop
 8002894:	080031b1 	.word	0x080031b1
 8002898:	080031d3 	.word	0x080031d3
 800289c:	0800320b 	.word	0x0800320b
 80028a0:	0800322f 	.word	0x0800322f

080028a4 <_cleanup_r>:
 80028a4:	4901      	ldr	r1, [pc, #4]	; (80028ac <_cleanup_r+0x8>)
 80028a6:	f000 b885 	b.w	80029b4 <_fwalk_reent>
 80028aa:	bf00      	nop
 80028ac:	08002809 	.word	0x08002809

080028b0 <__sfmoreglue>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2568      	movs	r5, #104	; 0x68
 80028b4:	1e4a      	subs	r2, r1, #1
 80028b6:	4355      	muls	r5, r2
 80028b8:	460e      	mov	r6, r1
 80028ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80028be:	f000 f947 	bl	8002b50 <_malloc_r>
 80028c2:	4604      	mov	r4, r0
 80028c4:	b140      	cbz	r0, 80028d8 <__sfmoreglue+0x28>
 80028c6:	2100      	movs	r1, #0
 80028c8:	e9c0 1600 	strd	r1, r6, [r0]
 80028cc:	300c      	adds	r0, #12
 80028ce:	60a0      	str	r0, [r4, #8]
 80028d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028d4:	f7ff fdce 	bl	8002474 <memset>
 80028d8:	4620      	mov	r0, r4
 80028da:	bd70      	pop	{r4, r5, r6, pc}

080028dc <__sinit>:
 80028dc:	6983      	ldr	r3, [r0, #24]
 80028de:	b510      	push	{r4, lr}
 80028e0:	4604      	mov	r4, r0
 80028e2:	bb33      	cbnz	r3, 8002932 <__sinit+0x56>
 80028e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80028e8:	6503      	str	r3, [r0, #80]	; 0x50
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <__sinit+0x58>)
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <__sinit+0x5c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6282      	str	r2, [r0, #40]	; 0x28
 80028f2:	4298      	cmp	r0, r3
 80028f4:	bf04      	itt	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	6183      	streq	r3, [r0, #24]
 80028fa:	f000 f81f 	bl	800293c <__sfp>
 80028fe:	6060      	str	r0, [r4, #4]
 8002900:	4620      	mov	r0, r4
 8002902:	f000 f81b 	bl	800293c <__sfp>
 8002906:	60a0      	str	r0, [r4, #8]
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f817 	bl	800293c <__sfp>
 800290e:	2200      	movs	r2, #0
 8002910:	60e0      	str	r0, [r4, #12]
 8002912:	2104      	movs	r1, #4
 8002914:	6860      	ldr	r0, [r4, #4]
 8002916:	f7ff ffa1 	bl	800285c <std>
 800291a:	2201      	movs	r2, #1
 800291c:	2109      	movs	r1, #9
 800291e:	68a0      	ldr	r0, [r4, #8]
 8002920:	f7ff ff9c 	bl	800285c <std>
 8002924:	2202      	movs	r2, #2
 8002926:	2112      	movs	r1, #18
 8002928:	68e0      	ldr	r0, [r4, #12]
 800292a:	f7ff ff97 	bl	800285c <std>
 800292e:	2301      	movs	r3, #1
 8002930:	61a3      	str	r3, [r4, #24]
 8002932:	bd10      	pop	{r4, pc}
 8002934:	080033a0 	.word	0x080033a0
 8002938:	080028a5 	.word	0x080028a5

0800293c <__sfp>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <__sfp+0x70>)
 8002940:	4607      	mov	r7, r0
 8002942:	681e      	ldr	r6, [r3, #0]
 8002944:	69b3      	ldr	r3, [r6, #24]
 8002946:	b913      	cbnz	r3, 800294e <__sfp+0x12>
 8002948:	4630      	mov	r0, r6
 800294a:	f7ff ffc7 	bl	80028dc <__sinit>
 800294e:	3648      	adds	r6, #72	; 0x48
 8002950:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002954:	3b01      	subs	r3, #1
 8002956:	d503      	bpl.n	8002960 <__sfp+0x24>
 8002958:	6833      	ldr	r3, [r6, #0]
 800295a:	b133      	cbz	r3, 800296a <__sfp+0x2e>
 800295c:	6836      	ldr	r6, [r6, #0]
 800295e:	e7f7      	b.n	8002950 <__sfp+0x14>
 8002960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002964:	b16d      	cbz	r5, 8002982 <__sfp+0x46>
 8002966:	3468      	adds	r4, #104	; 0x68
 8002968:	e7f4      	b.n	8002954 <__sfp+0x18>
 800296a:	2104      	movs	r1, #4
 800296c:	4638      	mov	r0, r7
 800296e:	f7ff ff9f 	bl	80028b0 <__sfmoreglue>
 8002972:	6030      	str	r0, [r6, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	d1f1      	bne.n	800295c <__sfp+0x20>
 8002978:	230c      	movs	r3, #12
 800297a:	4604      	mov	r4, r0
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4620      	mov	r0, r4
 8002980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <__sfp+0x74>)
 8002984:	6665      	str	r5, [r4, #100]	; 0x64
 8002986:	e9c4 5500 	strd	r5, r5, [r4]
 800298a:	60a5      	str	r5, [r4, #8]
 800298c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002990:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002994:	2208      	movs	r2, #8
 8002996:	4629      	mov	r1, r5
 8002998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800299c:	f7ff fd6a 	bl	8002474 <memset>
 80029a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029a8:	e7e9      	b.n	800297e <__sfp+0x42>
 80029aa:	bf00      	nop
 80029ac:	080033a0 	.word	0x080033a0
 80029b0:	ffff0001 	.word	0xffff0001

080029b4 <_fwalk_reent>:
 80029b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029b8:	4680      	mov	r8, r0
 80029ba:	4689      	mov	r9, r1
 80029bc:	2600      	movs	r6, #0
 80029be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029c2:	b914      	cbnz	r4, 80029ca <_fwalk_reent+0x16>
 80029c4:	4630      	mov	r0, r6
 80029c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80029ce:	3f01      	subs	r7, #1
 80029d0:	d501      	bpl.n	80029d6 <_fwalk_reent+0x22>
 80029d2:	6824      	ldr	r4, [r4, #0]
 80029d4:	e7f5      	b.n	80029c2 <_fwalk_reent+0xe>
 80029d6:	89ab      	ldrh	r3, [r5, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d907      	bls.n	80029ec <_fwalk_reent+0x38>
 80029dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029e0:	3301      	adds	r3, #1
 80029e2:	d003      	beq.n	80029ec <_fwalk_reent+0x38>
 80029e4:	4629      	mov	r1, r5
 80029e6:	4640      	mov	r0, r8
 80029e8:	47c8      	blx	r9
 80029ea:	4306      	orrs	r6, r0
 80029ec:	3568      	adds	r5, #104	; 0x68
 80029ee:	e7ee      	b.n	80029ce <_fwalk_reent+0x1a>

080029f0 <__swhatbuf_r>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	460e      	mov	r6, r1
 80029f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f8:	b096      	sub	sp, #88	; 0x58
 80029fa:	2900      	cmp	r1, #0
 80029fc:	4614      	mov	r4, r2
 80029fe:	461d      	mov	r5, r3
 8002a00:	da07      	bge.n	8002a12 <__swhatbuf_r+0x22>
 8002a02:	2300      	movs	r3, #0
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	89b3      	ldrh	r3, [r6, #12]
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	d410      	bmi.n	8002a2e <__swhatbuf_r+0x3e>
 8002a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a10:	e00e      	b.n	8002a30 <__swhatbuf_r+0x40>
 8002a12:	466a      	mov	r2, sp
 8002a14:	f000 fc32 	bl	800327c <_fstat_r>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	dbf2      	blt.n	8002a02 <__swhatbuf_r+0x12>
 8002a1c:	9a01      	ldr	r2, [sp, #4]
 8002a1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a26:	425a      	negs	r2, r3
 8002a28:	415a      	adcs	r2, r3
 8002a2a:	602a      	str	r2, [r5, #0]
 8002a2c:	e7ee      	b.n	8002a0c <__swhatbuf_r+0x1c>
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	2000      	movs	r0, #0
 8002a32:	6023      	str	r3, [r4, #0]
 8002a34:	b016      	add	sp, #88	; 0x58
 8002a36:	bd70      	pop	{r4, r5, r6, pc}

08002a38 <__smakebuf_r>:
 8002a38:	898b      	ldrh	r3, [r1, #12]
 8002a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a3c:	079d      	lsls	r5, r3, #30
 8002a3e:	4606      	mov	r6, r0
 8002a40:	460c      	mov	r4, r1
 8002a42:	d507      	bpl.n	8002a54 <__smakebuf_r+0x1c>
 8002a44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	6123      	str	r3, [r4, #16]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	6163      	str	r3, [r4, #20]
 8002a50:	b002      	add	sp, #8
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	ab01      	add	r3, sp, #4
 8002a56:	466a      	mov	r2, sp
 8002a58:	f7ff ffca 	bl	80029f0 <__swhatbuf_r>
 8002a5c:	9900      	ldr	r1, [sp, #0]
 8002a5e:	4605      	mov	r5, r0
 8002a60:	4630      	mov	r0, r6
 8002a62:	f000 f875 	bl	8002b50 <_malloc_r>
 8002a66:	b948      	cbnz	r0, 8002a7c <__smakebuf_r+0x44>
 8002a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a6c:	059a      	lsls	r2, r3, #22
 8002a6e:	d4ef      	bmi.n	8002a50 <__smakebuf_r+0x18>
 8002a70:	f023 0303 	bic.w	r3, r3, #3
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	81a3      	strh	r3, [r4, #12]
 8002a7a:	e7e3      	b.n	8002a44 <__smakebuf_r+0xc>
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <__smakebuf_r+0x7c>)
 8002a7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a80:	89a3      	ldrh	r3, [r4, #12]
 8002a82:	6020      	str	r0, [r4, #0]
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	81a3      	strh	r3, [r4, #12]
 8002a8a:	9b00      	ldr	r3, [sp, #0]
 8002a8c:	6120      	str	r0, [r4, #16]
 8002a8e:	6163      	str	r3, [r4, #20]
 8002a90:	9b01      	ldr	r3, [sp, #4]
 8002a92:	b15b      	cbz	r3, 8002aac <__smakebuf_r+0x74>
 8002a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a98:	4630      	mov	r0, r6
 8002a9a:	f000 fc01 	bl	80032a0 <_isatty_r>
 8002a9e:	b128      	cbz	r0, 8002aac <__smakebuf_r+0x74>
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	81a3      	strh	r3, [r4, #12]
 8002aac:	89a3      	ldrh	r3, [r4, #12]
 8002aae:	431d      	orrs	r5, r3
 8002ab0:	81a5      	strh	r5, [r4, #12]
 8002ab2:	e7cd      	b.n	8002a50 <__smakebuf_r+0x18>
 8002ab4:	080028a5 	.word	0x080028a5

08002ab8 <_free_r>:
 8002ab8:	b538      	push	{r3, r4, r5, lr}
 8002aba:	4605      	mov	r5, r0
 8002abc:	2900      	cmp	r1, #0
 8002abe:	d043      	beq.n	8002b48 <_free_r+0x90>
 8002ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ac4:	1f0c      	subs	r4, r1, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bfb8      	it	lt
 8002aca:	18e4      	addlt	r4, r4, r3
 8002acc:	f000 fc18 	bl	8003300 <__malloc_lock>
 8002ad0:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <_free_r+0x94>)
 8002ad2:	6813      	ldr	r3, [r2, #0]
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	b933      	cbnz	r3, 8002ae6 <_free_r+0x2e>
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	6014      	str	r4, [r2, #0]
 8002adc:	4628      	mov	r0, r5
 8002ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ae2:	f000 bc0e 	b.w	8003302 <__malloc_unlock>
 8002ae6:	42a3      	cmp	r3, r4
 8002ae8:	d90b      	bls.n	8002b02 <_free_r+0x4a>
 8002aea:	6821      	ldr	r1, [r4, #0]
 8002aec:	1862      	adds	r2, r4, r1
 8002aee:	4293      	cmp	r3, r2
 8002af0:	bf01      	itttt	eq
 8002af2:	681a      	ldreq	r2, [r3, #0]
 8002af4:	685b      	ldreq	r3, [r3, #4]
 8002af6:	1852      	addeq	r2, r2, r1
 8002af8:	6022      	streq	r2, [r4, #0]
 8002afa:	6063      	str	r3, [r4, #4]
 8002afc:	6004      	str	r4, [r0, #0]
 8002afe:	e7ed      	b.n	8002adc <_free_r+0x24>
 8002b00:	4613      	mov	r3, r2
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	b10a      	cbz	r2, 8002b0a <_free_r+0x52>
 8002b06:	42a2      	cmp	r2, r4
 8002b08:	d9fa      	bls.n	8002b00 <_free_r+0x48>
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	1858      	adds	r0, r3, r1
 8002b0e:	42a0      	cmp	r0, r4
 8002b10:	d10b      	bne.n	8002b2a <_free_r+0x72>
 8002b12:	6820      	ldr	r0, [r4, #0]
 8002b14:	4401      	add	r1, r0
 8002b16:	1858      	adds	r0, r3, r1
 8002b18:	4282      	cmp	r2, r0
 8002b1a:	6019      	str	r1, [r3, #0]
 8002b1c:	d1de      	bne.n	8002adc <_free_r+0x24>
 8002b1e:	6810      	ldr	r0, [r2, #0]
 8002b20:	6852      	ldr	r2, [r2, #4]
 8002b22:	4401      	add	r1, r0
 8002b24:	6019      	str	r1, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e7d8      	b.n	8002adc <_free_r+0x24>
 8002b2a:	d902      	bls.n	8002b32 <_free_r+0x7a>
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	602b      	str	r3, [r5, #0]
 8002b30:	e7d4      	b.n	8002adc <_free_r+0x24>
 8002b32:	6820      	ldr	r0, [r4, #0]
 8002b34:	1821      	adds	r1, r4, r0
 8002b36:	428a      	cmp	r2, r1
 8002b38:	bf01      	itttt	eq
 8002b3a:	6811      	ldreq	r1, [r2, #0]
 8002b3c:	6852      	ldreq	r2, [r2, #4]
 8002b3e:	1809      	addeq	r1, r1, r0
 8002b40:	6021      	streq	r1, [r4, #0]
 8002b42:	6062      	str	r2, [r4, #4]
 8002b44:	605c      	str	r4, [r3, #4]
 8002b46:	e7c9      	b.n	8002adc <_free_r+0x24>
 8002b48:	bd38      	pop	{r3, r4, r5, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000090 	.word	0x20000090

08002b50 <_malloc_r>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	1ccd      	adds	r5, r1, #3
 8002b54:	f025 0503 	bic.w	r5, r5, #3
 8002b58:	3508      	adds	r5, #8
 8002b5a:	2d0c      	cmp	r5, #12
 8002b5c:	bf38      	it	cc
 8002b5e:	250c      	movcc	r5, #12
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	4606      	mov	r6, r0
 8002b64:	db01      	blt.n	8002b6a <_malloc_r+0x1a>
 8002b66:	42a9      	cmp	r1, r5
 8002b68:	d903      	bls.n	8002b72 <_malloc_r+0x22>
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	6033      	str	r3, [r6, #0]
 8002b6e:	2000      	movs	r0, #0
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
 8002b72:	f000 fbc5 	bl	8003300 <__malloc_lock>
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <_malloc_r+0xac>)
 8002b78:	6814      	ldr	r4, [r2, #0]
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	b991      	cbnz	r1, 8002ba4 <_malloc_r+0x54>
 8002b7e:	4c20      	ldr	r4, [pc, #128]	; (8002c00 <_malloc_r+0xb0>)
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	b91b      	cbnz	r3, 8002b8c <_malloc_r+0x3c>
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 fb03 	bl	8003190 <_sbrk_r>
 8002b8a:	6020      	str	r0, [r4, #0]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4630      	mov	r0, r6
 8002b90:	f000 fafe 	bl	8003190 <_sbrk_r>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d124      	bne.n	8002be2 <_malloc_r+0x92>
 8002b98:	230c      	movs	r3, #12
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	6033      	str	r3, [r6, #0]
 8002b9e:	f000 fbb0 	bl	8003302 <__malloc_unlock>
 8002ba2:	e7e4      	b.n	8002b6e <_malloc_r+0x1e>
 8002ba4:	680b      	ldr	r3, [r1, #0]
 8002ba6:	1b5b      	subs	r3, r3, r5
 8002ba8:	d418      	bmi.n	8002bdc <_malloc_r+0x8c>
 8002baa:	2b0b      	cmp	r3, #11
 8002bac:	d90f      	bls.n	8002bce <_malloc_r+0x7e>
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	18cc      	adds	r4, r1, r3
 8002bb2:	50cd      	str	r5, [r1, r3]
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f000 fba4 	bl	8003302 <__malloc_unlock>
 8002bba:	f104 000b 	add.w	r0, r4, #11
 8002bbe:	1d23      	adds	r3, r4, #4
 8002bc0:	f020 0007 	bic.w	r0, r0, #7
 8002bc4:	1ac3      	subs	r3, r0, r3
 8002bc6:	d0d3      	beq.n	8002b70 <_malloc_r+0x20>
 8002bc8:	425a      	negs	r2, r3
 8002bca:	50e2      	str	r2, [r4, r3]
 8002bcc:	e7d0      	b.n	8002b70 <_malloc_r+0x20>
 8002bce:	684b      	ldr	r3, [r1, #4]
 8002bd0:	428c      	cmp	r4, r1
 8002bd2:	bf16      	itet	ne
 8002bd4:	6063      	strne	r3, [r4, #4]
 8002bd6:	6013      	streq	r3, [r2, #0]
 8002bd8:	460c      	movne	r4, r1
 8002bda:	e7eb      	b.n	8002bb4 <_malloc_r+0x64>
 8002bdc:	460c      	mov	r4, r1
 8002bde:	6849      	ldr	r1, [r1, #4]
 8002be0:	e7cc      	b.n	8002b7c <_malloc_r+0x2c>
 8002be2:	1cc4      	adds	r4, r0, #3
 8002be4:	f024 0403 	bic.w	r4, r4, #3
 8002be8:	42a0      	cmp	r0, r4
 8002bea:	d005      	beq.n	8002bf8 <_malloc_r+0xa8>
 8002bec:	1a21      	subs	r1, r4, r0
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f000 face 	bl	8003190 <_sbrk_r>
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d0cf      	beq.n	8002b98 <_malloc_r+0x48>
 8002bf8:	6025      	str	r5, [r4, #0]
 8002bfa:	e7db      	b.n	8002bb4 <_malloc_r+0x64>
 8002bfc:	20000090 	.word	0x20000090
 8002c00:	20000094 	.word	0x20000094

08002c04 <__sfputc_r>:
 8002c04:	6893      	ldr	r3, [r2, #8]
 8002c06:	b410      	push	{r4}
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	6093      	str	r3, [r2, #8]
 8002c0e:	da07      	bge.n	8002c20 <__sfputc_r+0x1c>
 8002c10:	6994      	ldr	r4, [r2, #24]
 8002c12:	42a3      	cmp	r3, r4
 8002c14:	db01      	blt.n	8002c1a <__sfputc_r+0x16>
 8002c16:	290a      	cmp	r1, #10
 8002c18:	d102      	bne.n	8002c20 <__sfputc_r+0x1c>
 8002c1a:	bc10      	pop	{r4}
 8002c1c:	f7ff bcae 	b.w	800257c <__swbuf_r>
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	1c58      	adds	r0, r3, #1
 8002c24:	6010      	str	r0, [r2, #0]
 8002c26:	7019      	strb	r1, [r3, #0]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	bc10      	pop	{r4}
 8002c2c:	4770      	bx	lr

08002c2e <__sfputs_r>:
 8002c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c30:	4606      	mov	r6, r0
 8002c32:	460f      	mov	r7, r1
 8002c34:	4614      	mov	r4, r2
 8002c36:	18d5      	adds	r5, r2, r3
 8002c38:	42ac      	cmp	r4, r5
 8002c3a:	d101      	bne.n	8002c40 <__sfputs_r+0x12>
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e007      	b.n	8002c50 <__sfputs_r+0x22>
 8002c40:	463a      	mov	r2, r7
 8002c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c46:	4630      	mov	r0, r6
 8002c48:	f7ff ffdc 	bl	8002c04 <__sfputc_r>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d1f3      	bne.n	8002c38 <__sfputs_r+0xa>
 8002c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c54 <_vfiprintf_r>:
 8002c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c58:	460c      	mov	r4, r1
 8002c5a:	b09d      	sub	sp, #116	; 0x74
 8002c5c:	4617      	mov	r7, r2
 8002c5e:	461d      	mov	r5, r3
 8002c60:	4606      	mov	r6, r0
 8002c62:	b118      	cbz	r0, 8002c6c <_vfiprintf_r+0x18>
 8002c64:	6983      	ldr	r3, [r0, #24]
 8002c66:	b90b      	cbnz	r3, 8002c6c <_vfiprintf_r+0x18>
 8002c68:	f7ff fe38 	bl	80028dc <__sinit>
 8002c6c:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <_vfiprintf_r+0x20c>)
 8002c6e:	429c      	cmp	r4, r3
 8002c70:	d158      	bne.n	8002d24 <_vfiprintf_r+0xd0>
 8002c72:	6874      	ldr	r4, [r6, #4]
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	0718      	lsls	r0, r3, #28
 8002c78:	d55e      	bpl.n	8002d38 <_vfiprintf_r+0xe4>
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d05b      	beq.n	8002d38 <_vfiprintf_r+0xe4>
 8002c80:	2300      	movs	r3, #0
 8002c82:	9309      	str	r3, [sp, #36]	; 0x24
 8002c84:	2320      	movs	r3, #32
 8002c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c8a:	2330      	movs	r3, #48	; 0x30
 8002c8c:	f04f 0b01 	mov.w	fp, #1
 8002c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c94:	9503      	str	r5, [sp, #12]
 8002c96:	46b8      	mov	r8, r7
 8002c98:	4645      	mov	r5, r8
 8002c9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c9e:	b10b      	cbz	r3, 8002ca4 <_vfiprintf_r+0x50>
 8002ca0:	2b25      	cmp	r3, #37	; 0x25
 8002ca2:	d154      	bne.n	8002d4e <_vfiprintf_r+0xfa>
 8002ca4:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ca8:	d00b      	beq.n	8002cc2 <_vfiprintf_r+0x6e>
 8002caa:	4653      	mov	r3, sl
 8002cac:	463a      	mov	r2, r7
 8002cae:	4621      	mov	r1, r4
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f7ff ffbc 	bl	8002c2e <__sfputs_r>
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	f000 80c2 	beq.w	8002e40 <_vfiprintf_r+0x1ec>
 8002cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cbe:	4453      	add	r3, sl
 8002cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc2:	f898 3000 	ldrb.w	r3, [r8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80ba 	beq.w	8002e40 <_vfiprintf_r+0x1ec>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	9307      	str	r3, [sp, #28]
 8002cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cde:	931a      	str	r3, [sp, #104]	; 0x68
 8002ce0:	46a8      	mov	r8, r5
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002ce8:	485e      	ldr	r0, [pc, #376]	; (8002e64 <_vfiprintf_r+0x210>)
 8002cea:	f000 fafb 	bl	80032e4 <memchr>
 8002cee:	9b04      	ldr	r3, [sp, #16]
 8002cf0:	bb78      	cbnz	r0, 8002d52 <_vfiprintf_r+0xfe>
 8002cf2:	06d9      	lsls	r1, r3, #27
 8002cf4:	bf44      	itt	mi
 8002cf6:	2220      	movmi	r2, #32
 8002cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cfc:	071a      	lsls	r2, r3, #28
 8002cfe:	bf44      	itt	mi
 8002d00:	222b      	movmi	r2, #43	; 0x2b
 8002d02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d06:	782a      	ldrb	r2, [r5, #0]
 8002d08:	2a2a      	cmp	r2, #42	; 0x2a
 8002d0a:	d02a      	beq.n	8002d62 <_vfiprintf_r+0x10e>
 8002d0c:	46a8      	mov	r8, r5
 8002d0e:	2000      	movs	r0, #0
 8002d10:	250a      	movs	r5, #10
 8002d12:	9a07      	ldr	r2, [sp, #28]
 8002d14:	4641      	mov	r1, r8
 8002d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d1a:	3b30      	subs	r3, #48	; 0x30
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	d969      	bls.n	8002df4 <_vfiprintf_r+0x1a0>
 8002d20:	b360      	cbz	r0, 8002d7c <_vfiprintf_r+0x128>
 8002d22:	e024      	b.n	8002d6e <_vfiprintf_r+0x11a>
 8002d24:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <_vfiprintf_r+0x214>)
 8002d26:	429c      	cmp	r4, r3
 8002d28:	d101      	bne.n	8002d2e <_vfiprintf_r+0xda>
 8002d2a:	68b4      	ldr	r4, [r6, #8]
 8002d2c:	e7a2      	b.n	8002c74 <_vfiprintf_r+0x20>
 8002d2e:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <_vfiprintf_r+0x218>)
 8002d30:	429c      	cmp	r4, r3
 8002d32:	bf08      	it	eq
 8002d34:	68f4      	ldreq	r4, [r6, #12]
 8002d36:	e79d      	b.n	8002c74 <_vfiprintf_r+0x20>
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7ff fc70 	bl	8002620 <__swsetup_r>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d09d      	beq.n	8002c80 <_vfiprintf_r+0x2c>
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d48:	b01d      	add	sp, #116	; 0x74
 8002d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d4e:	46a8      	mov	r8, r5
 8002d50:	e7a2      	b.n	8002c98 <_vfiprintf_r+0x44>
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <_vfiprintf_r+0x210>)
 8002d54:	4645      	mov	r5, r8
 8002d56:	1a80      	subs	r0, r0, r2
 8002d58:	fa0b f000 	lsl.w	r0, fp, r0
 8002d5c:	4318      	orrs	r0, r3
 8002d5e:	9004      	str	r0, [sp, #16]
 8002d60:	e7be      	b.n	8002ce0 <_vfiprintf_r+0x8c>
 8002d62:	9a03      	ldr	r2, [sp, #12]
 8002d64:	1d11      	adds	r1, r2, #4
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	9103      	str	r1, [sp, #12]
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	db01      	blt.n	8002d72 <_vfiprintf_r+0x11e>
 8002d6e:	9207      	str	r2, [sp, #28]
 8002d70:	e004      	b.n	8002d7c <_vfiprintf_r+0x128>
 8002d72:	4252      	negs	r2, r2
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	9207      	str	r2, [sp, #28]
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	f898 3000 	ldrb.w	r3, [r8]
 8002d80:	2b2e      	cmp	r3, #46	; 0x2e
 8002d82:	d10e      	bne.n	8002da2 <_vfiprintf_r+0x14e>
 8002d84:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002d88:	2b2a      	cmp	r3, #42	; 0x2a
 8002d8a:	d138      	bne.n	8002dfe <_vfiprintf_r+0x1aa>
 8002d8c:	9b03      	ldr	r3, [sp, #12]
 8002d8e:	f108 0802 	add.w	r8, r8, #2
 8002d92:	1d1a      	adds	r2, r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	9203      	str	r2, [sp, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bfb8      	it	lt
 8002d9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002da0:	9305      	str	r3, [sp, #20]
 8002da2:	4d33      	ldr	r5, [pc, #204]	; (8002e70 <_vfiprintf_r+0x21c>)
 8002da4:	2203      	movs	r2, #3
 8002da6:	f898 1000 	ldrb.w	r1, [r8]
 8002daa:	4628      	mov	r0, r5
 8002dac:	f000 fa9a 	bl	80032e4 <memchr>
 8002db0:	b140      	cbz	r0, 8002dc4 <_vfiprintf_r+0x170>
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	1b40      	subs	r0, r0, r5
 8002db6:	fa03 f000 	lsl.w	r0, r3, r0
 8002dba:	9b04      	ldr	r3, [sp, #16]
 8002dbc:	f108 0801 	add.w	r8, r8, #1
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	f898 1000 	ldrb.w	r1, [r8]
 8002dc8:	2206      	movs	r2, #6
 8002dca:	482a      	ldr	r0, [pc, #168]	; (8002e74 <_vfiprintf_r+0x220>)
 8002dcc:	f108 0701 	add.w	r7, r8, #1
 8002dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dd4:	f000 fa86 	bl	80032e4 <memchr>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d037      	beq.n	8002e4c <_vfiprintf_r+0x1f8>
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <_vfiprintf_r+0x224>)
 8002dde:	bb1b      	cbnz	r3, 8002e28 <_vfiprintf_r+0x1d4>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	3307      	adds	r3, #7
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	3308      	adds	r3, #8
 8002dea:	9303      	str	r3, [sp, #12]
 8002dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dee:	444b      	add	r3, r9
 8002df0:	9309      	str	r3, [sp, #36]	; 0x24
 8002df2:	e750      	b.n	8002c96 <_vfiprintf_r+0x42>
 8002df4:	fb05 3202 	mla	r2, r5, r2, r3
 8002df8:	2001      	movs	r0, #1
 8002dfa:	4688      	mov	r8, r1
 8002dfc:	e78a      	b.n	8002d14 <_vfiprintf_r+0xc0>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	250a      	movs	r5, #10
 8002e02:	4619      	mov	r1, r3
 8002e04:	f108 0801 	add.w	r8, r8, #1
 8002e08:	9305      	str	r3, [sp, #20]
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e10:	3a30      	subs	r2, #48	; 0x30
 8002e12:	2a09      	cmp	r2, #9
 8002e14:	d903      	bls.n	8002e1e <_vfiprintf_r+0x1ca>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0c3      	beq.n	8002da2 <_vfiprintf_r+0x14e>
 8002e1a:	9105      	str	r1, [sp, #20]
 8002e1c:	e7c1      	b.n	8002da2 <_vfiprintf_r+0x14e>
 8002e1e:	fb05 2101 	mla	r1, r5, r1, r2
 8002e22:	2301      	movs	r3, #1
 8002e24:	4680      	mov	r8, r0
 8002e26:	e7f0      	b.n	8002e0a <_vfiprintf_r+0x1b6>
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <_vfiprintf_r+0x228>)
 8002e30:	a904      	add	r1, sp, #16
 8002e32:	4630      	mov	r0, r6
 8002e34:	f3af 8000 	nop.w
 8002e38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002e3c:	4681      	mov	r9, r0
 8002e3e:	d1d5      	bne.n	8002dec <_vfiprintf_r+0x198>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	065b      	lsls	r3, r3, #25
 8002e44:	f53f af7e 	bmi.w	8002d44 <_vfiprintf_r+0xf0>
 8002e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e4a:	e77d      	b.n	8002d48 <_vfiprintf_r+0xf4>
 8002e4c:	ab03      	add	r3, sp, #12
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4622      	mov	r2, r4
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <_vfiprintf_r+0x228>)
 8002e54:	a904      	add	r1, sp, #16
 8002e56:	4630      	mov	r0, r6
 8002e58:	f000 f888 	bl	8002f6c <_printf_i>
 8002e5c:	e7ec      	b.n	8002e38 <_vfiprintf_r+0x1e4>
 8002e5e:	bf00      	nop
 8002e60:	080033c4 	.word	0x080033c4
 8002e64:	08003404 	.word	0x08003404
 8002e68:	080033e4 	.word	0x080033e4
 8002e6c:	080033a4 	.word	0x080033a4
 8002e70:	0800340a 	.word	0x0800340a
 8002e74:	0800340e 	.word	0x0800340e
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	08002c2f 	.word	0x08002c2f

08002e80 <_printf_common>:
 8002e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	4691      	mov	r9, r2
 8002e86:	461f      	mov	r7, r3
 8002e88:	688a      	ldr	r2, [r1, #8]
 8002e8a:	690b      	ldr	r3, [r1, #16]
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	bfb8      	it	lt
 8002e92:	4613      	movlt	r3, r2
 8002e94:	f8c9 3000 	str.w	r3, [r9]
 8002e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea2:	b112      	cbz	r2, 8002eaa <_printf_common+0x2a>
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f8c9 3000 	str.w	r3, [r9]
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	0699      	lsls	r1, r3, #26
 8002eae:	bf42      	ittt	mi
 8002eb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002eb4:	3302      	addmi	r3, #2
 8002eb6:	f8c9 3000 	strmi.w	r3, [r9]
 8002eba:	6825      	ldr	r5, [r4, #0]
 8002ebc:	f015 0506 	ands.w	r5, r5, #6
 8002ec0:	d107      	bne.n	8002ed2 <_printf_common+0x52>
 8002ec2:	f104 0a19 	add.w	sl, r4, #25
 8002ec6:	68e3      	ldr	r3, [r4, #12]
 8002ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	42ab      	cmp	r3, r5
 8002ed0:	dc29      	bgt.n	8002f26 <_printf_common+0xa6>
 8002ed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	3300      	adds	r3, #0
 8002eda:	bf18      	it	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	0692      	lsls	r2, r2, #26
 8002ee0:	d42e      	bmi.n	8002f40 <_printf_common+0xc0>
 8002ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ee6:	4639      	mov	r1, r7
 8002ee8:	4630      	mov	r0, r6
 8002eea:	47c0      	blx	r8
 8002eec:	3001      	adds	r0, #1
 8002eee:	d021      	beq.n	8002f34 <_printf_common+0xb4>
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	68e5      	ldr	r5, [r4, #12]
 8002ef4:	f003 0306 	and.w	r3, r3, #6
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	bf18      	it	ne
 8002efc:	2500      	movne	r5, #0
 8002efe:	f8d9 2000 	ldr.w	r2, [r9]
 8002f02:	f04f 0900 	mov.w	r9, #0
 8002f06:	bf08      	it	eq
 8002f08:	1aad      	subeq	r5, r5, r2
 8002f0a:	68a3      	ldr	r3, [r4, #8]
 8002f0c:	6922      	ldr	r2, [r4, #16]
 8002f0e:	bf08      	it	eq
 8002f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f14:	4293      	cmp	r3, r2
 8002f16:	bfc4      	itt	gt
 8002f18:	1a9b      	subgt	r3, r3, r2
 8002f1a:	18ed      	addgt	r5, r5, r3
 8002f1c:	341a      	adds	r4, #26
 8002f1e:	454d      	cmp	r5, r9
 8002f20:	d11a      	bne.n	8002f58 <_printf_common+0xd8>
 8002f22:	2000      	movs	r0, #0
 8002f24:	e008      	b.n	8002f38 <_printf_common+0xb8>
 8002f26:	2301      	movs	r3, #1
 8002f28:	4652      	mov	r2, sl
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	47c0      	blx	r8
 8002f30:	3001      	adds	r0, #1
 8002f32:	d103      	bne.n	8002f3c <_printf_common+0xbc>
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	e7c2      	b.n	8002ec6 <_printf_common+0x46>
 8002f40:	2030      	movs	r0, #48	; 0x30
 8002f42:	18e1      	adds	r1, r4, r3
 8002f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f4e:	4422      	add	r2, r4
 8002f50:	3302      	adds	r3, #2
 8002f52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f56:	e7c4      	b.n	8002ee2 <_printf_common+0x62>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4639      	mov	r1, r7
 8002f5e:	4630      	mov	r0, r6
 8002f60:	47c0      	blx	r8
 8002f62:	3001      	adds	r0, #1
 8002f64:	d0e6      	beq.n	8002f34 <_printf_common+0xb4>
 8002f66:	f109 0901 	add.w	r9, r9, #1
 8002f6a:	e7d8      	b.n	8002f1e <_printf_common+0x9e>

08002f6c <_printf_i>:
 8002f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f74:	460c      	mov	r4, r1
 8002f76:	7e09      	ldrb	r1, [r1, #24]
 8002f78:	b085      	sub	sp, #20
 8002f7a:	296e      	cmp	r1, #110	; 0x6e
 8002f7c:	4617      	mov	r7, r2
 8002f7e:	4606      	mov	r6, r0
 8002f80:	4698      	mov	r8, r3
 8002f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f84:	f000 80b3 	beq.w	80030ee <_printf_i+0x182>
 8002f88:	d822      	bhi.n	8002fd0 <_printf_i+0x64>
 8002f8a:	2963      	cmp	r1, #99	; 0x63
 8002f8c:	d036      	beq.n	8002ffc <_printf_i+0x90>
 8002f8e:	d80a      	bhi.n	8002fa6 <_printf_i+0x3a>
 8002f90:	2900      	cmp	r1, #0
 8002f92:	f000 80b9 	beq.w	8003108 <_printf_i+0x19c>
 8002f96:	2958      	cmp	r1, #88	; 0x58
 8002f98:	f000 8083 	beq.w	80030a2 <_printf_i+0x136>
 8002f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002fa4:	e032      	b.n	800300c <_printf_i+0xa0>
 8002fa6:	2964      	cmp	r1, #100	; 0x64
 8002fa8:	d001      	beq.n	8002fae <_printf_i+0x42>
 8002faa:	2969      	cmp	r1, #105	; 0x69
 8002fac:	d1f6      	bne.n	8002f9c <_printf_i+0x30>
 8002fae:	6820      	ldr	r0, [r4, #0]
 8002fb0:	6813      	ldr	r3, [r2, #0]
 8002fb2:	0605      	lsls	r5, r0, #24
 8002fb4:	f103 0104 	add.w	r1, r3, #4
 8002fb8:	d52a      	bpl.n	8003010 <_printf_i+0xa4>
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6011      	str	r1, [r2, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da03      	bge.n	8002fca <_printf_i+0x5e>
 8002fc2:	222d      	movs	r2, #45	; 0x2d
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002fca:	486f      	ldr	r0, [pc, #444]	; (8003188 <_printf_i+0x21c>)
 8002fcc:	220a      	movs	r2, #10
 8002fce:	e039      	b.n	8003044 <_printf_i+0xd8>
 8002fd0:	2973      	cmp	r1, #115	; 0x73
 8002fd2:	f000 809d 	beq.w	8003110 <_printf_i+0x1a4>
 8002fd6:	d808      	bhi.n	8002fea <_printf_i+0x7e>
 8002fd8:	296f      	cmp	r1, #111	; 0x6f
 8002fda:	d020      	beq.n	800301e <_printf_i+0xb2>
 8002fdc:	2970      	cmp	r1, #112	; 0x70
 8002fde:	d1dd      	bne.n	8002f9c <_printf_i+0x30>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	f043 0320 	orr.w	r3, r3, #32
 8002fe6:	6023      	str	r3, [r4, #0]
 8002fe8:	e003      	b.n	8002ff2 <_printf_i+0x86>
 8002fea:	2975      	cmp	r1, #117	; 0x75
 8002fec:	d017      	beq.n	800301e <_printf_i+0xb2>
 8002fee:	2978      	cmp	r1, #120	; 0x78
 8002ff0:	d1d4      	bne.n	8002f9c <_printf_i+0x30>
 8002ff2:	2378      	movs	r3, #120	; 0x78
 8002ff4:	4865      	ldr	r0, [pc, #404]	; (800318c <_printf_i+0x220>)
 8002ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ffa:	e055      	b.n	80030a8 <_printf_i+0x13c>
 8002ffc:	6813      	ldr	r3, [r2, #0]
 8002ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003002:	1d19      	adds	r1, r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6011      	str	r1, [r2, #0]
 8003008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800300c:	2301      	movs	r3, #1
 800300e:	e08c      	b.n	800312a <_printf_i+0x1be>
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003016:	6011      	str	r1, [r2, #0]
 8003018:	bf18      	it	ne
 800301a:	b21b      	sxthne	r3, r3
 800301c:	e7cf      	b.n	8002fbe <_printf_i+0x52>
 800301e:	6813      	ldr	r3, [r2, #0]
 8003020:	6825      	ldr	r5, [r4, #0]
 8003022:	1d18      	adds	r0, r3, #4
 8003024:	6010      	str	r0, [r2, #0]
 8003026:	0628      	lsls	r0, r5, #24
 8003028:	d501      	bpl.n	800302e <_printf_i+0xc2>
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	e002      	b.n	8003034 <_printf_i+0xc8>
 800302e:	0668      	lsls	r0, r5, #25
 8003030:	d5fb      	bpl.n	800302a <_printf_i+0xbe>
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	296f      	cmp	r1, #111	; 0x6f
 8003036:	bf14      	ite	ne
 8003038:	220a      	movne	r2, #10
 800303a:	2208      	moveq	r2, #8
 800303c:	4852      	ldr	r0, [pc, #328]	; (8003188 <_printf_i+0x21c>)
 800303e:	2100      	movs	r1, #0
 8003040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003044:	6865      	ldr	r5, [r4, #4]
 8003046:	2d00      	cmp	r5, #0
 8003048:	60a5      	str	r5, [r4, #8]
 800304a:	f2c0 8095 	blt.w	8003178 <_printf_i+0x20c>
 800304e:	6821      	ldr	r1, [r4, #0]
 8003050:	f021 0104 	bic.w	r1, r1, #4
 8003054:	6021      	str	r1, [r4, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d13d      	bne.n	80030d6 <_printf_i+0x16a>
 800305a:	2d00      	cmp	r5, #0
 800305c:	f040 808e 	bne.w	800317c <_printf_i+0x210>
 8003060:	4665      	mov	r5, ip
 8003062:	2a08      	cmp	r2, #8
 8003064:	d10b      	bne.n	800307e <_printf_i+0x112>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	07db      	lsls	r3, r3, #31
 800306a:	d508      	bpl.n	800307e <_printf_i+0x112>
 800306c:	6923      	ldr	r3, [r4, #16]
 800306e:	6862      	ldr	r2, [r4, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	bfde      	ittt	le
 8003074:	2330      	movle	r3, #48	; 0x30
 8003076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800307a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800307e:	ebac 0305 	sub.w	r3, ip, r5
 8003082:	6123      	str	r3, [r4, #16]
 8003084:	f8cd 8000 	str.w	r8, [sp]
 8003088:	463b      	mov	r3, r7
 800308a:	aa03      	add	r2, sp, #12
 800308c:	4621      	mov	r1, r4
 800308e:	4630      	mov	r0, r6
 8003090:	f7ff fef6 	bl	8002e80 <_printf_common>
 8003094:	3001      	adds	r0, #1
 8003096:	d14d      	bne.n	8003134 <_printf_i+0x1c8>
 8003098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800309c:	b005      	add	sp, #20
 800309e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030a2:	4839      	ldr	r0, [pc, #228]	; (8003188 <_printf_i+0x21c>)
 80030a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030a8:	6813      	ldr	r3, [r2, #0]
 80030aa:	6821      	ldr	r1, [r4, #0]
 80030ac:	1d1d      	adds	r5, r3, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6015      	str	r5, [r2, #0]
 80030b2:	060a      	lsls	r2, r1, #24
 80030b4:	d50b      	bpl.n	80030ce <_printf_i+0x162>
 80030b6:	07ca      	lsls	r2, r1, #31
 80030b8:	bf44      	itt	mi
 80030ba:	f041 0120 	orrmi.w	r1, r1, #32
 80030be:	6021      	strmi	r1, [r4, #0]
 80030c0:	b91b      	cbnz	r3, 80030ca <_printf_i+0x15e>
 80030c2:	6822      	ldr	r2, [r4, #0]
 80030c4:	f022 0220 	bic.w	r2, r2, #32
 80030c8:	6022      	str	r2, [r4, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	e7b7      	b.n	800303e <_printf_i+0xd2>
 80030ce:	064d      	lsls	r5, r1, #25
 80030d0:	bf48      	it	mi
 80030d2:	b29b      	uxthmi	r3, r3
 80030d4:	e7ef      	b.n	80030b6 <_printf_i+0x14a>
 80030d6:	4665      	mov	r5, ip
 80030d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80030dc:	fb02 3311 	mls	r3, r2, r1, r3
 80030e0:	5cc3      	ldrb	r3, [r0, r3]
 80030e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030e6:	460b      	mov	r3, r1
 80030e8:	2900      	cmp	r1, #0
 80030ea:	d1f5      	bne.n	80030d8 <_printf_i+0x16c>
 80030ec:	e7b9      	b.n	8003062 <_printf_i+0xf6>
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	6825      	ldr	r5, [r4, #0]
 80030f2:	1d18      	adds	r0, r3, #4
 80030f4:	6961      	ldr	r1, [r4, #20]
 80030f6:	6010      	str	r0, [r2, #0]
 80030f8:	0628      	lsls	r0, r5, #24
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	d501      	bpl.n	8003102 <_printf_i+0x196>
 80030fe:	6019      	str	r1, [r3, #0]
 8003100:	e002      	b.n	8003108 <_printf_i+0x19c>
 8003102:	066a      	lsls	r2, r5, #25
 8003104:	d5fb      	bpl.n	80030fe <_printf_i+0x192>
 8003106:	8019      	strh	r1, [r3, #0]
 8003108:	2300      	movs	r3, #0
 800310a:	4665      	mov	r5, ip
 800310c:	6123      	str	r3, [r4, #16]
 800310e:	e7b9      	b.n	8003084 <_printf_i+0x118>
 8003110:	6813      	ldr	r3, [r2, #0]
 8003112:	1d19      	adds	r1, r3, #4
 8003114:	6011      	str	r1, [r2, #0]
 8003116:	681d      	ldr	r5, [r3, #0]
 8003118:	6862      	ldr	r2, [r4, #4]
 800311a:	2100      	movs	r1, #0
 800311c:	4628      	mov	r0, r5
 800311e:	f000 f8e1 	bl	80032e4 <memchr>
 8003122:	b108      	cbz	r0, 8003128 <_printf_i+0x1bc>
 8003124:	1b40      	subs	r0, r0, r5
 8003126:	6060      	str	r0, [r4, #4]
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	6123      	str	r3, [r4, #16]
 800312c:	2300      	movs	r3, #0
 800312e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003132:	e7a7      	b.n	8003084 <_printf_i+0x118>
 8003134:	6923      	ldr	r3, [r4, #16]
 8003136:	462a      	mov	r2, r5
 8003138:	4639      	mov	r1, r7
 800313a:	4630      	mov	r0, r6
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d0aa      	beq.n	8003098 <_printf_i+0x12c>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	079b      	lsls	r3, r3, #30
 8003146:	d413      	bmi.n	8003170 <_printf_i+0x204>
 8003148:	68e0      	ldr	r0, [r4, #12]
 800314a:	9b03      	ldr	r3, [sp, #12]
 800314c:	4298      	cmp	r0, r3
 800314e:	bfb8      	it	lt
 8003150:	4618      	movlt	r0, r3
 8003152:	e7a3      	b.n	800309c <_printf_i+0x130>
 8003154:	2301      	movs	r3, #1
 8003156:	464a      	mov	r2, r9
 8003158:	4639      	mov	r1, r7
 800315a:	4630      	mov	r0, r6
 800315c:	47c0      	blx	r8
 800315e:	3001      	adds	r0, #1
 8003160:	d09a      	beq.n	8003098 <_printf_i+0x12c>
 8003162:	3501      	adds	r5, #1
 8003164:	68e3      	ldr	r3, [r4, #12]
 8003166:	9a03      	ldr	r2, [sp, #12]
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	42ab      	cmp	r3, r5
 800316c:	dcf2      	bgt.n	8003154 <_printf_i+0x1e8>
 800316e:	e7eb      	b.n	8003148 <_printf_i+0x1dc>
 8003170:	2500      	movs	r5, #0
 8003172:	f104 0919 	add.w	r9, r4, #25
 8003176:	e7f5      	b.n	8003164 <_printf_i+0x1f8>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ac      	bne.n	80030d6 <_printf_i+0x16a>
 800317c:	7803      	ldrb	r3, [r0, #0]
 800317e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003182:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003186:	e76c      	b.n	8003062 <_printf_i+0xf6>
 8003188:	08003415 	.word	0x08003415
 800318c:	08003426 	.word	0x08003426

08003190 <_sbrk_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	2300      	movs	r3, #0
 8003194:	4c05      	ldr	r4, [pc, #20]	; (80031ac <_sbrk_r+0x1c>)
 8003196:	4605      	mov	r5, r0
 8003198:	4608      	mov	r0, r1
 800319a:	6023      	str	r3, [r4, #0]
 800319c:	f7ff f8ba 	bl	8002314 <_sbrk>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d102      	bne.n	80031aa <_sbrk_r+0x1a>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	b103      	cbz	r3, 80031aa <_sbrk_r+0x1a>
 80031a8:	602b      	str	r3, [r5, #0]
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	20000180 	.word	0x20000180

080031b0 <__sread>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	460c      	mov	r4, r1
 80031b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b8:	f000 f8a4 	bl	8003304 <_read_r>
 80031bc:	2800      	cmp	r0, #0
 80031be:	bfab      	itete	ge
 80031c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031c2:	89a3      	ldrhlt	r3, [r4, #12]
 80031c4:	181b      	addge	r3, r3, r0
 80031c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031ca:	bfac      	ite	ge
 80031cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80031ce:	81a3      	strhlt	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__swrite>:
 80031d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	461f      	mov	r7, r3
 80031d8:	898b      	ldrh	r3, [r1, #12]
 80031da:	4605      	mov	r5, r0
 80031dc:	05db      	lsls	r3, r3, #23
 80031de:	460c      	mov	r4, r1
 80031e0:	4616      	mov	r6, r2
 80031e2:	d505      	bpl.n	80031f0 <__swrite+0x1e>
 80031e4:	2302      	movs	r3, #2
 80031e6:	2200      	movs	r2, #0
 80031e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ec:	f000 f868 	bl	80032c0 <_lseek_r>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	4632      	mov	r2, r6
 80031f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031f8:	81a3      	strh	r3, [r4, #12]
 80031fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fe:	463b      	mov	r3, r7
 8003200:	4628      	mov	r0, r5
 8003202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003206:	f000 b817 	b.w	8003238 <_write_r>

0800320a <__sseek>:
 800320a:	b510      	push	{r4, lr}
 800320c:	460c      	mov	r4, r1
 800320e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003212:	f000 f855 	bl	80032c0 <_lseek_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	bf15      	itete	ne
 800321c:	6560      	strne	r0, [r4, #84]	; 0x54
 800321e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003226:	81a3      	strheq	r3, [r4, #12]
 8003228:	bf18      	it	ne
 800322a:	81a3      	strhne	r3, [r4, #12]
 800322c:	bd10      	pop	{r4, pc}

0800322e <__sclose>:
 800322e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003232:	f000 b813 	b.w	800325c <_close_r>
	...

08003238 <_write_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	2200      	movs	r2, #0
 8003242:	4c05      	ldr	r4, [pc, #20]	; (8003258 <_write_r+0x20>)
 8003244:	6022      	str	r2, [r4, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	f7fe fefe 	bl	8002048 <_write>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d102      	bne.n	8003256 <_write_r+0x1e>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	b103      	cbz	r3, 8003256 <_write_r+0x1e>
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	bd38      	pop	{r3, r4, r5, pc}
 8003258:	20000180 	.word	0x20000180

0800325c <_close_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	2300      	movs	r3, #0
 8003260:	4c05      	ldr	r4, [pc, #20]	; (8003278 <_close_r+0x1c>)
 8003262:	4605      	mov	r5, r0
 8003264:	4608      	mov	r0, r1
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	f7ff f823 	bl	80022b2 <_close>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_close_r+0x1a>
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	b103      	cbz	r3, 8003276 <_close_r+0x1a>
 8003274:	602b      	str	r3, [r5, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	20000180 	.word	0x20000180

0800327c <_fstat_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	2300      	movs	r3, #0
 8003280:	4c06      	ldr	r4, [pc, #24]	; (800329c <_fstat_r+0x20>)
 8003282:	4605      	mov	r5, r0
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	f7ff f81d 	bl	80022c8 <_fstat>
 800328e:	1c43      	adds	r3, r0, #1
 8003290:	d102      	bne.n	8003298 <_fstat_r+0x1c>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	b103      	cbz	r3, 8003298 <_fstat_r+0x1c>
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	bd38      	pop	{r3, r4, r5, pc}
 800329a:	bf00      	nop
 800329c:	20000180 	.word	0x20000180

080032a0 <_isatty_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	2300      	movs	r3, #0
 80032a4:	4c05      	ldr	r4, [pc, #20]	; (80032bc <_isatty_r+0x1c>)
 80032a6:	4605      	mov	r5, r0
 80032a8:	4608      	mov	r0, r1
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	f7ff f81b 	bl	80022e6 <_isatty>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_isatty_r+0x1a>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_isatty_r+0x1a>
 80032b8:	602b      	str	r3, [r5, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	20000180 	.word	0x20000180

080032c0 <_lseek_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4605      	mov	r5, r0
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	2200      	movs	r2, #0
 80032ca:	4c05      	ldr	r4, [pc, #20]	; (80032e0 <_lseek_r+0x20>)
 80032cc:	6022      	str	r2, [r4, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7ff f813 	bl	80022fa <_lseek>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_lseek_r+0x1e>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	b103      	cbz	r3, 80032de <_lseek_r+0x1e>
 80032dc:	602b      	str	r3, [r5, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	20000180 	.word	0x20000180

080032e4 <memchr>:
 80032e4:	b510      	push	{r4, lr}
 80032e6:	b2c9      	uxtb	r1, r1
 80032e8:	4402      	add	r2, r0
 80032ea:	4290      	cmp	r0, r2
 80032ec:	4603      	mov	r3, r0
 80032ee:	d101      	bne.n	80032f4 <memchr+0x10>
 80032f0:	2300      	movs	r3, #0
 80032f2:	e003      	b.n	80032fc <memchr+0x18>
 80032f4:	781c      	ldrb	r4, [r3, #0]
 80032f6:	3001      	adds	r0, #1
 80032f8:	428c      	cmp	r4, r1
 80032fa:	d1f6      	bne.n	80032ea <memchr+0x6>
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd10      	pop	{r4, pc}

08003300 <__malloc_lock>:
 8003300:	4770      	bx	lr

08003302 <__malloc_unlock>:
 8003302:	4770      	bx	lr

08003304 <_read_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4605      	mov	r5, r0
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	2200      	movs	r2, #0
 800330e:	4c05      	ldr	r4, [pc, #20]	; (8003324 <_read_r+0x20>)
 8003310:	6022      	str	r2, [r4, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	f7fe ffb0 	bl	8002278 <_read>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_read_r+0x1e>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	b103      	cbz	r3, 8003322 <_read_r+0x1e>
 8003320:	602b      	str	r3, [r5, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000180 	.word	0x20000180

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
